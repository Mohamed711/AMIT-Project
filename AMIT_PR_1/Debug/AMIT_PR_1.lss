
AMIT_PR_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000169a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  0000169a  0000172e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080014a  0080014a  00001818  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000410  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003562  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012f0  00000000  00000000  000051ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000111f  00000000  00000000  000064aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000089c  00000000  00000000  000075cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c20  00000000  00000000  00007e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b79  00000000  00000000  00008a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  0000a601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 36       	cpi	r26, 0x6A	; 106
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
      8a:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

void ADC_Init(void)
{
	/*VREF=AREF and 10 bits precision */
   /*Clear the ADMUX Register*/
   *(ADMUX_REG) = 0x00;
      92:	17 b8       	out	0x07, r1	; 7
   /*Veref = AREF*/
   *(ADMUX_REG) |= REF_AREF;
      94:	87 b1       	in	r24, 0x07	; 7
      96:	87 b9       	out	0x07, r24	; 7

   *(ADMUX_REG) |= PREC;
      98:	87 b1       	in	r24, 0x07	; 7
      9a:	87 b9       	out	0x07, r24	; 7
	/*enable ADC, single conversion,500 khz sampling frequency*/
	/*Clear ADCSRA*/
	*(ADCSRA_REG) = 0x00;
      9c:	16 b8       	out	0x06, r1	; 6
	/*Trigering = single*/
	*(ADCSRA_REG) |= TRIG;
      9e:	86 b1       	in	r24, 0x06	; 6
      a0:	86 b9       	out	0x06, r24	; 6
	/*Set Dev Factor*/
	*(ADCSRA_REG) |= DEV_FACTOR;
      a2:	86 b1       	in	r24, 0x06	; 6
      a4:	86 b9       	out	0x06, r24	; 6
	/*Enable ADC*/
	*(ADCSRA_REG) |= ADC_Enable;
      a6:	37 9a       	sbi	0x06, 7	; 6
      a8:	08 95       	ret

000000aa <read_adc>:
AdcRetType read_adc(u8 channel)
{
	AdcRetType RetVal;
	/*select channel*/
    channel &= 0x1f;
	*(ADMUX_REG) |= channel;
      aa:	97 b1       	in	r25, 0x07	; 7

AdcRetType read_adc(u8 channel)
{
	AdcRetType RetVal;
	/*select channel*/
    channel &= 0x1f;
      ac:	8f 71       	andi	r24, 0x1F	; 31
	*(ADMUX_REG) |= channel;
      ae:	98 2b       	or	r25, r24
      b0:	97 b9       	out	0x07, r25	; 7
	/*start conversion*/
	*(ADCSRA_REG) |= ADC_START_CONV;
      b2:	36 9a       	sbi	0x06, 6	; 6
	/*wait until conversion end*/
    while((*(ADCSRA_REG) & ADC_INT_FLAG_MASK) == 0x00);
      b4:	34 9b       	sbis	0x06, 4	; 6
      b6:	fe cf       	rjmp	.-4      	; 0xb4 <read_adc+0xa>
    /*Clear the flag*/
	*(ADCSRA_REG) |= ADC_INT_FLAG_MASK;
      b8:	34 9a       	sbi	0x06, 4	; 6
	/*Read the Result*/
	RetVal = READ_RESULT();
      ba:	84 b1       	in	r24, 0x04	; 4
      bc:	25 b1       	in	r18, 0x05	; 5
      be:	90 e0       	ldi	r25, 0x00	; 0
	return RetVal;

}
      c0:	92 2b       	or	r25, r18
      c2:	08 95       	ret

000000c4 <main>:
u8 newPasswordReceived = 0;
	
int main(void)
{

	lcd_Init();
      c4:	0e 94 81 02 	call	0x502	; 0x502 <lcd_Init>
	KPD_Init();
      c8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <KPD_Init>
	TMGR_Init();
      cc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <TMGR_Init>
	TC72_Init(TC72_MODE_CONT);
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	0e 94 07 08 	call	0x100e	; 0x100e <TC72_Init>
	LM35_Init();
      d6:	0e 94 13 04 	call	0x826	; 0x826 <LM35_Init>
	RTC_Init();
      da:	0e 94 32 04 	call	0x864	; 0x864 <RTC_Init>
	UART_vidInit();
      de:	0e 94 c4 08 	call	0x1188	; 0x1188 <UART_vidInit>
	
	/* Check the system last state and initialize it 
	 * Either by restoring the last state of the system
	 * or by reset the system and start it
	 */
	system_vidInitialize();
      e2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <system_vidInitialize>
				
	while(1)
	{	
		if (currentScreen == WELCOME_SCREEN)
      e6:	80 91 69 01 	lds	r24, 0x0169
      ea:	81 11       	cpse	r24, r1
      ec:	07 c0       	rjmp	.+14     	; 0xfc <main+0x38>
		{	
			if (KPD_Getkey(KPD_ID0) != 0 )
      ee:	0e 94 8b 01 	call	0x316	; 0x316 <KPD_Getkey>
      f2:	88 23       	and	r24, r24
      f4:	61 f1       	breq	.+88     	; 0x14e <main+0x8a>
			{
				PasswordEntrySCN_Init();
      f6:	0e 94 c9 05 	call	0xb92	; 0xb92 <PasswordEntrySCN_Init>
      fa:	29 c0       	rjmp	.+82     	; 0x14e <main+0x8a>
			}
		}
		else if (currentScreen == PASSWORD_ENTRY)
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	19 f4       	brne	.+6      	; 0x106 <main+0x42>
		{
			KPD_PasswordEntered();
     100:	0e 94 75 07 	call	0xeea	; 0xeea <KPD_PasswordEntered>
     104:	24 c0       	rjmp	.+72     	; 0x14e <main+0x8a>
		}
		else if (currentScreen == SYSTEM_ENTRY_SCN)
     106:	83 30       	cpi	r24, 0x03	; 3
     108:	69 f4       	brne	.+26     	; 0x124 <main+0x60>
		{
			u8 PressedKey;
			PressedKey = KPD_Getkey(KPD_ID0);
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 8b 01 	call	0x316	; 0x316 <KPD_Getkey>
			if (PressedKey == '1')
     110:	81 33       	cpi	r24, 0x31	; 49
     112:	19 f4       	brne	.+6      	; 0x11a <main+0x56>
			{
				PasswordChangeSCN_Init();
     114:	0e 94 a0 05 	call	0xb40	; 0xb40 <PasswordChangeSCN_Init>
     118:	1a c0       	rjmp	.+52     	; 0x14e <main+0x8a>
			}
			else if (PressedKey == '2')
     11a:	82 33       	cpi	r24, 0x32	; 50
     11c:	c1 f4       	brne	.+48     	; 0x14e <main+0x8a>
			{
				MainSCN_Init();
     11e:	0e 94 be 06 	call	0xd7c	; 0xd7c <MainSCN_Init>
     122:	15 c0       	rjmp	.+42     	; 0x14e <main+0x8a>
			}
		}
		else if (currentScreen == NEW_PASS_SCN)
     124:	84 30       	cpi	r24, 0x04	; 4
     126:	39 f4       	brne	.+14     	; 0x136 <main+0x72>
		{	
			if (newPasswordReceived == 1)
     128:	80 91 4a 01 	lds	r24, 0x014A
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	79 f4       	brne	.+30     	; 0x14e <main+0x8a>
			{
				systemEntrySCN_Init();		
     130:	0e 94 8d 05 	call	0xb1a	; 0xb1a <systemEntrySCN_Init>
     134:	0c c0       	rjmp	.+24     	; 0x14e <main+0x8a>
			}
		}
		else if (currentScreen == MAIN_SCN)
     136:	85 30       	cpi	r24, 0x05	; 5
     138:	51 f4       	brne	.+20     	; 0x14e <main+0x8a>
		{
			u8 PressedKey;
			PressedKey = KPD_Getkey(KPD_ID0);
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 8b 01 	call	0x316	; 0x316 <KPD_Getkey>
     140:	c8 2f       	mov	r28, r24
			MainSCN_Update();
     142:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MainSCN_Update>
			if (PressedKey == '*')
     146:	ca 32       	cpi	r28, 0x2A	; 42
     148:	11 f4       	brne	.+4      	; 0x14e <main+0x8a>
			{
				systemEntrySCN_Init();
     14a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <systemEntrySCN_Init>
			}
		}
		EEPROM_Write(SCN_ADDRESS,currentScreen);
     14e:	60 91 69 01 	lds	r22, 0x0169
     152:	80 e3       	ldi	r24, 0x30	; 48
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_Write>
	}	
     15a:	c5 cf       	rjmp	.-118    	; 0xe6 <main+0x22>

0000015c <DIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void DIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	81 f0       	breq	.+32     	; 0x180 <DIO_InitPortDirection+0x24>
     160:	28 f0       	brcs	.+10     	; 0x16c <DIO_InitPortDirection+0x10>
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	b9 f0       	breq	.+46     	; 0x194 <DIO_InitPortDirection+0x38>
     166:	83 30       	cpi	r24, 0x03	; 3
     168:	f9 f0       	breq	.+62     	; 0x1a8 <DIO_InitPortDirection+0x4c>
     16a:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
     16c:	8a b3       	in	r24, 0x1a	; 26
     16e:	94 2f       	mov	r25, r20
     170:	90 95       	com	r25
     172:	89 23       	and	r24, r25
     174:	8a bb       	out	0x1a, r24	; 26
     176:	8a b3       	in	r24, 0x1a	; 26
     178:	46 23       	and	r20, r22
     17a:	48 2b       	or	r20, r24
     17c:	4a bb       	out	0x1a, r20	; 26
		}
		break;
     17e:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
     180:	87 b3       	in	r24, 0x17	; 23
     182:	94 2f       	mov	r25, r20
     184:	90 95       	com	r25
     186:	89 23       	and	r24, r25
     188:	87 bb       	out	0x17, r24	; 23
     18a:	87 b3       	in	r24, 0x17	; 23
     18c:	46 23       	and	r20, r22
     18e:	48 2b       	or	r20, r24
     190:	47 bb       	out	0x17, r20	; 23
		}
		break;
     192:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
     194:	84 b3       	in	r24, 0x14	; 20
     196:	94 2f       	mov	r25, r20
     198:	90 95       	com	r25
     19a:	89 23       	and	r24, r25
     19c:	84 bb       	out	0x14, r24	; 20
     19e:	84 b3       	in	r24, 0x14	; 20
     1a0:	46 23       	and	r20, r22
     1a2:	48 2b       	or	r20, r24
     1a4:	44 bb       	out	0x14, r20	; 20
		}
		break;
     1a6:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
     1a8:	81 b3       	in	r24, 0x11	; 17
     1aa:	94 2f       	mov	r25, r20
     1ac:	90 95       	com	r25
     1ae:	89 23       	and	r24, r25
     1b0:	81 bb       	out	0x11, r24	; 17
     1b2:	81 b3       	in	r24, 0x11	; 17
     1b4:	46 23       	and	r20, r22
     1b6:	48 2b       	or	r20, r24
     1b8:	41 bb       	out	0x11, r20	; 17
     1ba:	08 95       	ret

000001bc <DIO_WritePort>:
		break;
	}	
}
void DIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	switch(PortName)
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	81 f0       	breq	.+32     	; 0x1e0 <DIO_WritePort+0x24>
     1c0:	28 f0       	brcs	.+10     	; 0x1cc <DIO_WritePort+0x10>
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	b9 f0       	breq	.+46     	; 0x1f4 <DIO_WritePort+0x38>
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	f9 f0       	breq	.+62     	; 0x208 <DIO_WritePort+0x4c>
     1ca:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
     1cc:	8b b3       	in	r24, 0x1b	; 27
     1ce:	94 2f       	mov	r25, r20
     1d0:	90 95       	com	r25
     1d2:	89 23       	and	r24, r25
     1d4:	8b bb       	out	0x1b, r24	; 27
     1d6:	8b b3       	in	r24, 0x1b	; 27
     1d8:	46 23       	and	r20, r22
     1da:	48 2b       	or	r20, r24
     1dc:	4b bb       	out	0x1b, r20	; 27
		}
		break;
     1de:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
     1e0:	88 b3       	in	r24, 0x18	; 24
     1e2:	94 2f       	mov	r25, r20
     1e4:	90 95       	com	r25
     1e6:	89 23       	and	r24, r25
     1e8:	88 bb       	out	0x18, r24	; 24
     1ea:	88 b3       	in	r24, 0x18	; 24
     1ec:	46 23       	and	r20, r22
     1ee:	48 2b       	or	r20, r24
     1f0:	48 bb       	out	0x18, r20	; 24
		}
		break;
     1f2:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
     1f4:	85 b3       	in	r24, 0x15	; 21
     1f6:	94 2f       	mov	r25, r20
     1f8:	90 95       	com	r25
     1fa:	89 23       	and	r24, r25
     1fc:	85 bb       	out	0x15, r24	; 21
     1fe:	85 b3       	in	r24, 0x15	; 21
     200:	46 23       	and	r20, r22
     202:	48 2b       	or	r20, r24
     204:	45 bb       	out	0x15, r20	; 21
		}
		break;
     206:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
     208:	82 b3       	in	r24, 0x12	; 18
     20a:	94 2f       	mov	r25, r20
     20c:	90 95       	com	r25
     20e:	89 23       	and	r24, r25
     210:	82 bb       	out	0x12, r24	; 18
     212:	82 b3       	in	r24, 0x12	; 18
     214:	46 23       	and	r20, r22
     216:	48 2b       	or	r20, r24
     218:	42 bb       	out	0x12, r20	; 18
     21a:	08 95       	ret

0000021c <DIO_ReadPort>:
	}	
}
u8 DIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
	switch(PortName)
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	49 f0       	breq	.+18     	; 0x232 <DIO_ReadPort+0x16>
     220:	28 f0       	brcs	.+10     	; 0x22c <DIO_ReadPort+0x10>
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	49 f0       	breq	.+18     	; 0x238 <DIO_ReadPort+0x1c>
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	51 f0       	breq	.+20     	; 0x23e <DIO_ReadPort+0x22>
     22a:	0c c0       	rjmp	.+24     	; 0x244 <DIO_ReadPort+0x28>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMask);
     22c:	89 b3       	in	r24, 0x19	; 25
     22e:	86 23       	and	r24, r22
		}
		break;
     230:	08 95       	ret
		case PB:
		{
			Data = READ_REG(PINB,PortMask);
     232:	86 b3       	in	r24, 0x16	; 22
     234:	86 23       	and	r24, r22
		}
		break;
     236:	08 95       	ret
		case PC:
		{
			Data = READ_REG(PINC,PortMask);
     238:	83 b3       	in	r24, 0x13	; 19
     23a:	86 23       	and	r24, r22
		}
		break;
     23c:	08 95       	ret
		case PD:
		{
			Data = READ_REG(PIND,PortMask);
     23e:	80 b3       	in	r24, 0x10	; 16
     240:	86 23       	and	r24, r22
		}
		break;
     242:	08 95       	ret
		break;
	}	
}
u8 DIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
     244:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
	}
	return Data;
	
     246:	08 95       	ret

00000248 <EEPROM_Write>:
#include "eeprom.h"
#include "EEPROM_Cfg.h"

void EEPROM_Write(u16 u16Address , u8 u8Data)
{
	  while(*(EECR_Reg) & EEPROM_WRITE_ENABLE);
     248:	e1 99       	sbic	0x1c, 1	; 28
     24a:	fe cf       	rjmp	.-4      	; 0x248 <EEPROM_Write>
	  *(EEARL_Reg) = u16Address;
     24c:	8e bb       	out	0x1e, r24	; 30
	  *(EEARH_Reg) = (u16Address>>8);
     24e:	9f bb       	out	0x1f, r25	; 31
	  *(EEDR_Reg)  = u8Data;
     250:	6d bb       	out	0x1d, r22	; 29
	  *(EECR_Reg) |= EEPROM_MASTER_WRITE_ENABLE;
     252:	e2 9a       	sbi	0x1c, 2	; 28
	  *(EECR_Reg) |= EEPROM_WRITE_ENABLE;
     254:	e1 9a       	sbi	0x1c, 1	; 28
     256:	08 95       	ret

00000258 <EEPROM_Read>:
}

u8 EEPROM_Read(u16 u16Address)
{
	     while(*(EECR_Reg) & EEPROM_WRITE_ENABLE);
     258:	e1 99       	sbic	0x1c, 1	; 28
     25a:	fe cf       	rjmp	.-4      	; 0x258 <EEPROM_Read>
	     *(EEARL_Reg) = u16Address;
     25c:	8e bb       	out	0x1e, r24	; 30
	     *(EEARH_Reg) = (u16Address >> 8);
     25e:	9f bb       	out	0x1f, r25	; 31
	     *(EECR_Reg) |= EEPROM_READ_ENABLE;
     260:	e0 9a       	sbi	0x1c, 0	; 28
	     return *(EEDR_Reg);
     262:	8d b3       	in	r24, 0x1d	; 29
}
     264:	08 95       	ret

00000266 <TWI_Init>:
#include "I2C.h"

void TWI_Init(void)
{
    // Bit Rate: 400.000 kHz
    TWBR=0x48;
     266:	88 e4       	ldi	r24, 0x48	; 72
     268:	80 b9       	out	0x00, r24	; 0
	TWSR=0x00;
     26a:	11 b8       	out	0x01, r1	; 1
	
    // Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
    // General Call Recognition: Off
    TWAR=0b00000010; // my address=0x01 :) 
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	82 b9       	out	0x02, r24	; 2
	
    TWCR=(1<<TWEN); //enable TWI
     270:	84 e0       	ldi	r24, 0x04	; 4
     272:	86 bf       	out	0x36, r24	; 54
     274:	08 95       	ret

00000276 <TWI_Start>:
{
    /* Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     276:	84 ea       	ldi	r24, 0xA4	; 164
     278:	86 bf       	out	0x36, r24	; 54
    
    // Wait for TWINT flag set in TWCR Register (start bit is send successfully) 
    while (!(TWCR & (1 << TWINT)));
     27a:	06 b6       	in	r0, 0x36	; 54
     27c:	07 fe       	sbrs	r0, 7
     27e:	fd cf       	rjmp	.-6      	; 0x27a <TWI_Start+0x4>
}
     280:	08 95       	ret

00000282 <TWI_Stop>:
{
    /* Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     282:	84 e9       	ldi	r24, 0x94	; 148
     284:	86 bf       	out	0x36, r24	; 54
     286:	08 95       	ret

00000288 <TWI_Write>:
}

void TWI_Write(unsigned char data)
{
    // Put data On TWI Register
    TWDR = data;
     288:	83 b9       	out	0x03, r24	; 3
    /* Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     28a:	84 e8       	ldi	r24, 0x84	; 132
     28c:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register(data is send successfully) 
    while (!(TWCR & (1 << TWINT)));
     28e:	06 b6       	in	r0, 0x36	; 54
     290:	07 fe       	sbrs	r0, 7
     292:	fd cf       	rjmp	.-6      	; 0x28e <TWI_Write+0x6>
}
     294:	08 95       	ret

00000296 <TWI_Read_With_NACK>:
{
	/* Clear the TWINT flag before reading the data TWINT=1
	 * enable sending ACK TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     296:	84 e8       	ldi	r24, 0x84	; 132
     298:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!(TWCR & (1 << TWINT)));
     29a:	06 b6       	in	r0, 0x36	; 54
     29c:	07 fe       	sbrs	r0, 7
     29e:	fd cf       	rjmp	.-6      	; 0x29a <TWI_Read_With_NACK+0x4>
    // Read Data
    return TWDR;
     2a0:	83 b1       	in	r24, 0x03	; 3
}
     2a2:	08 95       	ret

000002a4 <KPD_Init>:
#include "KEYPAD_Lcfg.h"
#include "../DIO/DIO.h"
#include <util/delay.h>

void KPD_Init()
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	c1 e8       	ldi	r28, 0x81	; 129
     2b2:	d0 e0       	ldi	r29, 0x00	; 0
     2b4:	09 e8       	ldi	r16, 0x89	; 137
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	fe 01       	movw	r30, r28
     2ba:	31 97       	sbiw	r30, 0x01	; 1
	
	for (LoopIndex = 0; LoopIndex < MAX_KPD_NUM ; LoopIndex++)
	{
		for (InnerLoopIndex = 0; InnerLoopIndex < ROW_NUM ;InnerLoopIndex++)
		{
			val1 = KPD_ConfigData[LoopIndex].KPD_Row[InnerLoopIndex].Port;
     2bc:	f0 80       	ld	r15, Z
			val2 = KPD_ConfigData[LoopIndex].KPD_Row[InnerLoopIndex].Mask;
     2be:	e8 80       	ld	r14, Y
			DIO_InitPortDirection(val1,0xFF,val2);
     2c0:	4e 2d       	mov	r20, r14
     2c2:	6f ef       	ldi	r22, 0xFF	; 255
     2c4:	8f 2d       	mov	r24, r15
     2c6:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
			DIO_WritePort(val1,0xFF,val2);
     2ca:	4e 2d       	mov	r20, r14
     2cc:	6f ef       	ldi	r22, 0xFF	; 255
     2ce:	8f 2d       	mov	r24, r15
     2d0:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
     2d4:	22 96       	adiw	r28, 0x02	; 2
	u8 InnerLoopIndex;
	u8 val1 , val2;
	
	for (LoopIndex = 0; LoopIndex < MAX_KPD_NUM ; LoopIndex++)
	{
		for (InnerLoopIndex = 0; InnerLoopIndex < ROW_NUM ;InnerLoopIndex++)
     2d6:	c0 17       	cp	r28, r16
     2d8:	d1 07       	cpc	r29, r17
     2da:	71 f7       	brne	.-36     	; 0x2b8 <KPD_Init+0x14>
     2dc:	c9 e8       	ldi	r28, 0x89	; 137
     2de:	d0 e0       	ldi	r29, 0x00	; 0
     2e0:	0f e8       	ldi	r16, 0x8F	; 143
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	fe 01       	movw	r30, r28
     2e6:	31 97       	sbiw	r30, 0x01	; 1
			DIO_WritePort(val1,0xFF,val2);
		}

		for (InnerLoopIndex = 0; InnerLoopIndex < COLUMN_NUM ;InnerLoopIndex++)
		{
			val1 = KPD_ConfigData[LoopIndex].KPD_Column[InnerLoopIndex].Port;
     2e8:	f0 80       	ld	r15, Z
			val2 = KPD_ConfigData[LoopIndex].KPD_Column[InnerLoopIndex].Mask;
     2ea:	e8 80       	ld	r14, Y
			DIO_InitPortDirection(val1,0x00,val2);
     2ec:	4e 2d       	mov	r20, r14
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	8f 2d       	mov	r24, r15
     2f2:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
			DIO_WritePort(val1,0xFF,val2);
     2f6:	4e 2d       	mov	r20, r14
     2f8:	6f ef       	ldi	r22, 0xFF	; 255
     2fa:	8f 2d       	mov	r24, r15
     2fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
     300:	22 96       	adiw	r28, 0x02	; 2
			val2 = KPD_ConfigData[LoopIndex].KPD_Row[InnerLoopIndex].Mask;
			DIO_InitPortDirection(val1,0xFF,val2);
			DIO_WritePort(val1,0xFF,val2);
		}

		for (InnerLoopIndex = 0; InnerLoopIndex < COLUMN_NUM ;InnerLoopIndex++)
     302:	c0 17       	cp	r28, r16
     304:	d1 07       	cpc	r29, r17
     306:	71 f7       	brne	.-36     	; 0x2e4 <KPD_Init+0x40>
			val2 = KPD_ConfigData[LoopIndex].KPD_Column[InnerLoopIndex].Mask;
			DIO_InitPortDirection(val1,0x00,val2);
			DIO_WritePort(val1,0xFF,val2);
		}
	}
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <KPD_Getkey>:

u8 KPD_Getkey(u8 KpdID)
{
     316:	2f 92       	push	r2
     318:	3f 92       	push	r3
     31a:	4f 92       	push	r4
     31c:	5f 92       	push	r5
     31e:	6f 92       	push	r6
     320:	7f 92       	push	r7
     322:	8f 92       	push	r8
     324:	9f 92       	push	r9
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	00 d0       	rcall	.+0      	; 0x33c <KPD_Getkey+0x26>
     33c:	1f 92       	push	r1
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
	u8 PinVal = 1;
	static u8 prevVal = 0;
	
	for (LoopIndex = 0; LoopIndex < ROW_NUM;LoopIndex++)
	{
		DIO_WritePort(KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Port,0x00,
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	9c 01       	movw	r18, r24
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	89 01       	movw	r16, r18
     34c:	00 0f       	add	r16, r16
     34e:	11 1f       	adc	r17, r17
     350:	00 0f       	add	r16, r16
     352:	11 1f       	adc	r17, r17
     354:	00 0f       	add	r16, r16
     356:	11 1f       	adc	r17, r17
     358:	02 1b       	sub	r16, r18
     35a:	13 0b       	sbc	r17, r19
     35c:	0f 57       	subi	r16, 0x7F	; 127
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	e1 2c       	mov	r14, r1
     362:	f1 2c       	mov	r15, r1

u8 KPD_Getkey(u8 KpdID)
{
	u8 LoopIndex;
	u8 InnerLoopIndex;
	u8 RetVal = 0;
     364:	19 82       	std	Y+1, r1	; 0x01
     366:	c9 01       	movw	r24, r18
     368:	29 01       	movw	r4, r18
     36a:	44 0c       	add	r4, r4
     36c:	55 1c       	adc	r5, r5
     36e:	44 0c       	add	r4, r4
     370:	55 1c       	adc	r5, r5
     372:	44 0c       	add	r4, r4
     374:	55 1c       	adc	r5, r5
     376:	92 01       	movw	r18, r4
     378:	28 1b       	sub	r18, r24
     37a:	39 0b       	sbc	r19, r25
     37c:	d9 01       	movw	r26, r18
     37e:	a7 57       	subi	r26, 0x77	; 119
     380:	bf 4f       	sbci	r27, 0xFF	; 255
     382:	2d 01       	movw	r4, r26
	u8 PinVal = 1;
	static u8 prevVal = 0;
	
	for (LoopIndex = 0; LoopIndex < ROW_NUM;LoopIndex++)
	{
		DIO_WritePort(KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Port,0x00,
     384:	17 01       	movw	r2, r14
     386:	38 01       	movw	r6, r16
     388:	f8 01       	movw	r30, r16
     38a:	40 81       	ld	r20, Z
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	d3 01       	movw	r26, r6
     390:	8e 91       	ld	r24, -X
     392:	6d 01       	movw	r12, r26
     394:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
     398:	42 01       	movw	r8, r4
     39a:	1a 82       	std	Y+2, r1	; 0x02
     39c:	1b 82       	std	Y+3, r1	; 0x03
		KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Mask);

		for (InnerLoopIndex = 0; InnerLoopIndex < COLUMN_NUM ; InnerLoopIndex++)
		{
			PinVal = DIO_ReadPort(KPD_ConfigData[KpdID].KPD_Column[InnerLoopIndex].Port,
     39e:	aa 80       	ldd	r10, Y+2	; 0x02
     3a0:	bb 80       	ldd	r11, Y+3	; 0x03
     3a2:	f4 01       	movw	r30, r8
     3a4:	60 81       	ld	r22, Z
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	80 81       	ld	r24, Z
     3aa:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_ReadPort>
				KPD_ConfigData[KpdID].KPD_Column[InnerLoopIndex].Mask);

			if (PinVal == 0)
     3ae:	81 11       	cpse	r24, r1
     3b0:	0c c0       	rjmp	.+24     	; 0x3ca <KPD_Getkey+0xb4>
			{
				RetVal = KPD_Map[LoopIndex][InnerLoopIndex];
     3b2:	f1 01       	movw	r30, r2
     3b4:	ee 0f       	add	r30, r30
     3b6:	ff 1f       	adc	r31, r31
     3b8:	e2 0d       	add	r30, r2
     3ba:	f3 1d       	adc	r31, r3
     3bc:	ea 0d       	add	r30, r10
     3be:	fb 1d       	adc	r31, r11
     3c0:	ec 58       	subi	r30, 0x8C	; 140
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	20 81       	ld	r18, Z
     3c6:	29 83       	std	Y+1, r18	; 0x01
				break;
     3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <KPD_Getkey+0xcc>
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	9b 81       	ldd	r25, Y+3	; 0x03
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	9b 83       	std	Y+3, r25	; 0x03
     3d2:	8a 83       	std	Y+2, r24	; 0x02
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	89 0e       	add	r8, r25
     3d8:	91 1c       	adc	r9, r1
	for (LoopIndex = 0; LoopIndex < ROW_NUM;LoopIndex++)
	{
		DIO_WritePort(KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Port,0x00,
		KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Mask);

		for (InnerLoopIndex = 0; InnerLoopIndex < COLUMN_NUM ; InnerLoopIndex++)
     3da:	aa 81       	ldd	r26, Y+2	; 0x02
     3dc:	bb 81       	ldd	r27, Y+3	; 0x03
     3de:	13 97       	sbiw	r26, 0x03	; 3
     3e0:	f1 f6       	brne	.-68     	; 0x39e <KPD_Getkey+0x88>
				RetVal = KPD_Map[LoopIndex][InnerLoopIndex];
				break;
			}
		}

	DIO_WritePort(KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Port,0xFF,
     3e2:	f3 01       	movw	r30, r6
     3e4:	40 81       	ld	r20, Z
     3e6:	6f ef       	ldi	r22, 0xFF	; 255
     3e8:	d6 01       	movw	r26, r12
     3ea:	8c 91       	ld	r24, X
     3ec:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
     3f0:	bf ef       	ldi	r27, 0xFF	; 255
     3f2:	eb 1a       	sub	r14, r27
     3f4:	fb 0a       	sbc	r15, r27
     3f6:	0e 5f       	subi	r16, 0xFE	; 254
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 InnerLoopIndex;
	u8 RetVal = 0;
	u8 PinVal = 1;
	static u8 prevVal = 0;
	
	for (LoopIndex = 0; LoopIndex < ROW_NUM;LoopIndex++)
     3fa:	e4 e0       	ldi	r30, 0x04	; 4
     3fc:	ee 16       	cp	r14, r30
     3fe:	f1 04       	cpc	r15, r1
     400:	09 f6       	brne	.-126    	; 0x384 <KPD_Getkey+0x6e>

	DIO_WritePort(KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Port,0xFF,
	KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Mask);
	}
	
	if (prevVal == RetVal)
     402:	80 91 4b 01 	lds	r24, 0x014B
     406:	f9 81       	ldd	r31, Y+1	; 0x01
     408:	f8 17       	cp	r31, r24
     40a:	19 f0       	breq	.+6      	; 0x412 <KPD_Getkey+0xfc>
	{
		RetVal = 0;
	}
	else 
	{
		prevVal = RetVal;
     40c:	f0 93 4b 01 	sts	0x014B, r31
     410:	01 c0       	rjmp	.+2      	; 0x414 <KPD_Getkey+0xfe>
	KPD_ConfigData[KpdID].KPD_Row[LoopIndex].Mask);
	}
	
	if (prevVal == RetVal)
	{
		RetVal = 0;
     412:	19 82       	std	Y+1, r1	; 0x01
	{
		prevVal = RetVal;
	}
	
	return RetVal;
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	af 90       	pop	r10
     430:	9f 90       	pop	r9
     432:	8f 90       	pop	r8
     434:	7f 90       	pop	r7
     436:	6f 90       	pop	r6
     438:	5f 90       	pop	r5
     43a:	4f 90       	pop	r4
     43c:	3f 90       	pop	r3
     43e:	2f 90       	pop	r2
     440:	08 95       	ret

00000442 <enableTrigger>:
//	lcd enable triggering function to make lcd aware about command or
//   data changes.
////////////////////////////////////////////////////////////////////

void enableTrigger(u8 LcdID)
{
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
	DIO_WritePort(LCD_ConfigData[LcdID].EnablePort,0x00,LCD_ConfigData[LcdID].EnableMask);
     446:	c8 2f       	mov	r28, r24
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	fe 01       	movw	r30, r28
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	e2 57       	subi	r30, 0x72	; 114
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	45 81       	ldd	r20, Z+5	; 0x05
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	84 81       	ldd	r24, Z+4	; 0x04
     462:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     466:	87 ee       	ldi	r24, 0xE7	; 231
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <enableTrigger+0x28>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <enableTrigger+0x2e>
     470:	00 00       	nop
	_delay_us(500);
	DIO_WritePort(LCD_ConfigData[LcdID].EnablePort,0xFF,LCD_ConfigData[LcdID].EnableMask);
     472:	cc 0f       	add	r28, r28
     474:	dd 1f       	adc	r29, r29
     476:	cc 0f       	add	r28, r28
     478:	dd 1f       	adc	r29, r29
     47a:	cc 0f       	add	r28, r28
     47c:	dd 1f       	adc	r29, r29
     47e:	c2 57       	subi	r28, 0x72	; 114
     480:	df 4f       	sbci	r29, 0xFF	; 255
     482:	4d 81       	ldd	r20, Y+5	; 0x05
     484:	6f ef       	ldi	r22, 0xFF	; 255
     486:	8c 81       	ldd	r24, Y+4	; 0x04
     488:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
     48c:	87 eb       	ldi	r24, 0xB7	; 183
     48e:	9b e0       	ldi	r25, 0x0B	; 11
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <enableTrigger+0x4e>
     494:	00 c0       	rjmp	.+0      	; 0x496 <enableTrigger+0x54>
     496:	00 00       	nop
	_delay_us(1500);
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <lcd_sendCommand>:
	}
}


static void lcd_sendCommand(u8 cmd,u8 LcdID)
{
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	08 2f       	mov	r16, r24
     4a8:	16 2f       	mov	r17, r22
	u8 high_nibble , low_nibble ;
	
	HIGH_NIBBLE(high_nibble,cmd);
	LOW_NIBBLE(low_nibble,cmd);

	DIO_WritePort(LCD_ConfigData[LcdID].RegisterSelectPort,0x00,LCD_ConfigData[LcdID].RegisterSelectMask);
     4aa:	c6 2f       	mov	r28, r22
     4ac:	d0 e0       	ldi	r29, 0x00	; 0
     4ae:	cc 0f       	add	r28, r28
     4b0:	dd 1f       	adc	r29, r29
     4b2:	cc 0f       	add	r28, r28
     4b4:	dd 1f       	adc	r29, r29
     4b6:	cc 0f       	add	r28, r28
     4b8:	dd 1f       	adc	r29, r29
     4ba:	c2 57       	subi	r28, 0x72	; 114
     4bc:	df 4f       	sbci	r29, 0xFF	; 255
     4be:	49 81       	ldd	r20, Y+1	; 0x01
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	88 81       	ld	r24, Y
     4c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	DIO_WritePort(LCD_ConfigData[LcdID].ReadWriteControlPort,0x00,LCD_ConfigData[LcdID].ReadWriteControlMask);
     4c8:	4b 81       	ldd	r20, Y+3	; 0x03
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
static void lcd_sendCommand(u8 cmd,u8 LcdID)
{

	u8 high_nibble , low_nibble ;
	
	HIGH_NIBBLE(high_nibble,cmd);
     4d2:	60 2f       	mov	r22, r16
     4d4:	60 7f       	andi	r22, 0xF0	; 240
	LOW_NIBBLE(low_nibble,cmd);

	DIO_WritePort(LCD_ConfigData[LcdID].RegisterSelectPort,0x00,LCD_ConfigData[LcdID].RegisterSelectMask);
	DIO_WritePort(LCD_ConfigData[LcdID].ReadWriteControlPort,0x00,LCD_ConfigData[LcdID].ReadWriteControlMask);
	
	DIO_WritePort(LCD_ConfigData[LcdID].DataPort,high_nibble,LCD_ConfigData[LcdID].DataMask);
     4d6:	4f 81       	ldd	r20, Y+7	; 0x07
     4d8:	8e 81       	ldd	r24, Y+6	; 0x06
     4da:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	enableTrigger(LcdID); // triggre lcd enable
     4de:	81 2f       	mov	r24, r17
     4e0:	0e 94 21 02 	call	0x442	; 0x442 <enableTrigger>
{

	u8 high_nibble , low_nibble ;
	
	HIGH_NIBBLE(high_nibble,cmd);
	LOW_NIBBLE(low_nibble,cmd);
     4e4:	60 2f       	mov	r22, r16
     4e6:	62 95       	swap	r22
     4e8:	60 7f       	andi	r22, 0xF0	; 240
	DIO_WritePort(LCD_ConfigData[LcdID].ReadWriteControlPort,0x00,LCD_ConfigData[LcdID].ReadWriteControlMask);
	
	DIO_WritePort(LCD_ConfigData[LcdID].DataPort,high_nibble,LCD_ConfigData[LcdID].DataMask);
	enableTrigger(LcdID); // triggre lcd enable

	DIO_WritePort(LCD_ConfigData[LcdID].DataPort,low_nibble,LCD_ConfigData[LcdID].DataMask);
     4ea:	4f 81       	ldd	r20, Y+7	; 0x07
     4ec:	8e 81       	ldd	r24, Y+6	; 0x06
     4ee:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	enableTrigger(LcdID);
     4f2:	81 2f       	mov	r24, r17
     4f4:	0e 94 21 02 	call	0x442	; 0x442 <enableTrigger>

}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <lcd_Init>:
///////////////////////////////////////////////////////////////////////////////////////
// LCD initialization API : set portB from pinB.4 to pinB.7 as o/p for data and commands
//							 and pinB.0 to pinB.2 o/p for control pins
//////////////////////////////////////////////////////////////////////////////////////
void lcd_Init(void)
{
     502:	4f 92       	push	r4
     504:	5f 92       	push	r5
     506:	6f 92       	push	r6
     508:	7f 92       	push	r7
     50a:	8f 92       	push	r8
     50c:	9f 92       	push	r9
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
	u8 LoopIndex;
	for (LoopIndex = 0 ; LoopIndex < MAX_LCD_NUM;LoopIndex++)
	{
		DIO_InitPortDirection(LCD_ConfigData[LoopIndex].RegisterSelectPort,0xFF,LCD_ConfigData[LoopIndex].RegisterSelectMask);
     522:	0f 2e       	mov	r0, r31
     524:	ff e8       	ldi	r31, 0x8F	; 143
     526:	cf 2e       	mov	r12, r31
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	df 2e       	mov	r13, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	0f 2e       	mov	r0, r31
     530:	fe e8       	ldi	r31, 0x8E	; 142
     532:	ef 2e       	mov	r14, r31
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	ff 2e       	mov	r15, r31
     538:	f0 2d       	mov	r31, r0
     53a:	f6 01       	movw	r30, r12
     53c:	40 81       	ld	r20, Z
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	f7 01       	movw	r30, r14
     542:	80 81       	ld	r24, Z
     544:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
		DIO_InitPortDirection(LCD_ConfigData[LoopIndex].ReadWriteControlPort,0xFF,LCD_ConfigData[LoopIndex].ReadWriteControlMask);
     548:	01 e9       	ldi	r16, 0x91	; 145
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	c0 e9       	ldi	r28, 0x90	; 144
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	f8 01       	movw	r30, r16
     552:	40 81       	ld	r20, Z
     554:	6f ef       	ldi	r22, 0xFF	; 255
     556:	88 81       	ld	r24, Y
     558:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
		DIO_InitPortDirection(LCD_ConfigData[LoopIndex].EnablePort,0xFF,LCD_ConfigData[LoopIndex].EnableMask);
     55c:	0f 2e       	mov	r0, r31
     55e:	f3 e9       	ldi	r31, 0x93	; 147
     560:	8f 2e       	mov	r8, r31
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	9f 2e       	mov	r9, r31
     566:	f0 2d       	mov	r31, r0
     568:	0f 2e       	mov	r0, r31
     56a:	f2 e9       	ldi	r31, 0x92	; 146
     56c:	af 2e       	mov	r10, r31
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	bf 2e       	mov	r11, r31
     572:	f0 2d       	mov	r31, r0
     574:	f4 01       	movw	r30, r8
     576:	40 81       	ld	r20, Z
     578:	6f ef       	ldi	r22, 0xFF	; 255
     57a:	f5 01       	movw	r30, r10
     57c:	80 81       	ld	r24, Z
     57e:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
		DIO_InitPortDirection(LCD_ConfigData[LoopIndex].DataPort,0xFF,LCD_ConfigData[LoopIndex].DataMask);
     582:	0f 2e       	mov	r0, r31
     584:	f5 e9       	ldi	r31, 0x95	; 149
     586:	6f 2e       	mov	r6, r31
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	7f 2e       	mov	r7, r31
     58c:	f0 2d       	mov	r31, r0
     58e:	0f 2e       	mov	r0, r31
     590:	f4 e9       	ldi	r31, 0x94	; 148
     592:	4f 2e       	mov	r4, r31
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	5f 2e       	mov	r5, r31
     598:	f0 2d       	mov	r31, r0
     59a:	f3 01       	movw	r30, r6
     59c:	40 81       	ld	r20, Z
     59e:	6f ef       	ldi	r22, 0xFF	; 255
     5a0:	f2 01       	movw	r30, r4
     5a2:	80 81       	ld	r24, Z
     5a4:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
		
		DIO_WritePort(LCD_ConfigData[LoopIndex].EnablePort,0xFF,LCD_ConfigData[LoopIndex].EnableMask);
     5a8:	f4 01       	movw	r30, r8
     5aa:	40 81       	ld	r20, Z
     5ac:	6f ef       	ldi	r22, 0xFF	; 255
     5ae:	f5 01       	movw	r30, r10
     5b0:	80 81       	ld	r24, Z
     5b2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
		DIO_WritePort(LCD_ConfigData[LoopIndex].RegisterSelectPort,0x00,LCD_ConfigData[LoopIndex].RegisterSelectMask);
     5b6:	f6 01       	movw	r30, r12
     5b8:	40 81       	ld	r20, Z
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	f7 01       	movw	r30, r14
     5be:	80 81       	ld	r24, Z
     5c0:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
		DIO_WritePort(LCD_ConfigData[LoopIndex].ReadWriteControlPort,0x00,LCD_ConfigData[LoopIndex].ReadWriteControlMask);
     5c4:	f8 01       	movw	r30, r16
     5c6:	40 81       	ld	r20, Z
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	88 81       	ld	r24, Y
     5cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
		DIO_WritePort(LCD_ConfigData[LoopIndex].DataPort,0x00,LCD_ConfigData[LoopIndex].DataMask);
     5d0:	f3 01       	movw	r30, r6
     5d2:	40 81       	ld	r20, Z
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	f2 01       	movw	r30, r4
     5d8:	80 81       	ld	r24, Z
     5da:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
		
		lcd_sendCommand(0x33,LoopIndex); // 4-bit mode
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	83 e3       	ldi	r24, 0x33	; 51
     5e2:	0e 94 4f 02 	call	0x49e	; 0x49e <lcd_sendCommand>
		lcd_sendCommand (0x32,LoopIndex);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	82 e3       	ldi	r24, 0x32	; 50
     5ea:	0e 94 4f 02 	call	0x49e	; 0x49e <lcd_sendCommand>
		lcd_sendCommand (0x28,LoopIndex);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	88 e2       	ldi	r24, 0x28	; 40
     5f2:	0e 94 4f 02 	call	0x49e	; 0x49e <lcd_sendCommand>

		lcd_sendCommand(0x0c,LoopIndex); // turn on lcd
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	8c e0       	ldi	r24, 0x0C	; 12
     5fa:	0e 94 4f 02 	call	0x49e	; 0x49e <lcd_sendCommand>
	}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	bf 90       	pop	r11
     610:	af 90       	pop	r10
     612:	9f 90       	pop	r9
     614:	8f 90       	pop	r8
     616:	7f 90       	pop	r7
     618:	6f 90       	pop	r6
     61a:	5f 90       	pop	r5
     61c:	4f 90       	pop	r4
     61e:	08 95       	ret

00000620 <lcd_displayChar>:
	enableTrigger(LcdID);

}

void lcd_displayChar (u8 data,u8 LcdID)
{
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	08 2f       	mov	r16, r24
     62a:	16 2f       	mov	r17, r22

	u8 high_nibble , low_nibble ;

	DIO_WritePort(LCD_ConfigData[LcdID].RegisterSelectPort,0xFF,LCD_ConfigData[LcdID].RegisterSelectMask);
     62c:	c6 2f       	mov	r28, r22
     62e:	d0 e0       	ldi	r29, 0x00	; 0
     630:	cc 0f       	add	r28, r28
     632:	dd 1f       	adc	r29, r29
     634:	cc 0f       	add	r28, r28
     636:	dd 1f       	adc	r29, r29
     638:	cc 0f       	add	r28, r28
     63a:	dd 1f       	adc	r29, r29
     63c:	c2 57       	subi	r28, 0x72	; 114
     63e:	df 4f       	sbci	r29, 0xFF	; 255
     640:	49 81       	ldd	r20, Y+1	; 0x01
     642:	6f ef       	ldi	r22, 0xFF	; 255
     644:	88 81       	ld	r24, Y
     646:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	DIO_WritePort(LCD_ConfigData[LcdID].ReadWriteControlPort,0x00,LCD_ConfigData[LcdID].ReadWriteControlMask);
     64a:	4b 81       	ldd	r20, Y+3	; 0x03
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	8a 81       	ldd	r24, Y+2	; 0x02
     650:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	
	HIGH_NIBBLE(high_nibble,data); // get high nibble data
     654:	60 2f       	mov	r22, r16
     656:	60 7f       	andi	r22, 0xF0	; 240
	LOW_NIBBLE(low_nibble,data); // get low nibble data
	
	DIO_WritePort(LCD_ConfigData[LcdID].DataPort,high_nibble,LCD_ConfigData[LcdID].DataMask);
     658:	4f 81       	ldd	r20, Y+7	; 0x07
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	enableTrigger(LcdID); // triggre lcd enable
     660:	81 2f       	mov	r24, r17
     662:	0e 94 21 02 	call	0x442	; 0x442 <enableTrigger>

	DIO_WritePort(LCD_ConfigData[LcdID].RegisterSelectPort,0xFF,LCD_ConfigData[LcdID].RegisterSelectMask);
	DIO_WritePort(LCD_ConfigData[LcdID].ReadWriteControlPort,0x00,LCD_ConfigData[LcdID].ReadWriteControlMask);
	
	HIGH_NIBBLE(high_nibble,data); // get high nibble data
	LOW_NIBBLE(low_nibble,data); // get low nibble data
     666:	60 2f       	mov	r22, r16
     668:	62 95       	swap	r22
     66a:	60 7f       	andi	r22, 0xF0	; 240
	
	DIO_WritePort(LCD_ConfigData[LcdID].DataPort,high_nibble,LCD_ConfigData[LcdID].DataMask);
	enableTrigger(LcdID); // triggre lcd enable
	
	DIO_WritePort(LCD_ConfigData[LcdID].DataPort,low_nibble,LCD_ConfigData[LcdID].DataMask);
     66c:	4f 81       	ldd	r20, Y+7	; 0x07
     66e:	8e 81       	ldd	r24, Y+6	; 0x06
     670:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	enableTrigger(LcdID);
     674:	81 2f       	mov	r24, r17
     676:	0e 94 21 02 	call	0x442	; 0x442 <enableTrigger>
	
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	08 95       	ret

00000684 <lcd_gotoxy>:

void lcd_gotoxy(u8 y,u8 x,u8 LcdID)
{
	u8 position = 0x80;
	
	switch(y)
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	49 f0       	breq	.+18     	; 0x69a <lcd_gotoxy+0x16>
     688:	28 f0       	brcs	.+10     	; 0x694 <lcd_gotoxy+0x10>
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	49 f0       	breq	.+18     	; 0x6a0 <lcd_gotoxy+0x1c>
     68e:	83 30       	cpi	r24, 0x03	; 3
     690:	51 f0       	breq	.+20     	; 0x6a6 <lcd_gotoxy+0x22>
     692:	0c c0       	rjmp	.+24     	; 0x6ac <lcd_gotoxy+0x28>
	{
		case 0:
			position=position+x;
     694:	80 e8       	ldi	r24, 0x80	; 128
     696:	86 0f       	add	r24, r22
			break;
     698:	0a c0       	rjmp	.+20     	; 0x6ae <lcd_gotoxy+0x2a>
		case 1:
			position=0xc0;
			position=position+x;
     69a:	80 ec       	ldi	r24, 0xC0	; 192
     69c:	86 0f       	add	r24, r22
			break;
     69e:	07 c0       	rjmp	.+14     	; 0x6ae <lcd_gotoxy+0x2a>
		case 2:
			position=position+x;
     6a0:	80 e8       	ldi	r24, 0x80	; 128
     6a2:	86 0f       	add	r24, r22
			break;
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <lcd_gotoxy+0x2a>
		case 3:
			position=position+x;
     6a6:	80 e8       	ldi	r24, 0x80	; 128
     6a8:	86 0f       	add	r24, r22
			break;
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <lcd_gotoxy+0x2a>
}


void lcd_gotoxy(u8 y,u8 x,u8 LcdID)
{
	u8 position = 0x80;
     6ac:	80 e8       	ldi	r24, 0x80	; 128
			break;
		case 3:
			position=position+x;
			break;
	}
	lcd_sendCommand(position,LcdID);
     6ae:	64 2f       	mov	r22, r20
     6b0:	0e 94 4f 02 	call	0x49e	; 0x49e <lcd_sendCommand>
     6b4:	08 95       	ret

000006b6 <lcd_clrScreen>:
}


void lcd_clrScreen(u8 LcdID)
{
	lcd_sendCommand(0x01,LcdID);
     6b6:	68 2f       	mov	r22, r24
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 4f 02 	call	0x49e	; 0x49e <lcd_sendCommand>
     6be:	08 95       	ret

000006c0 <lcd_dispString>:
}


void lcd_dispString( u8 * ptr,u8 LcdID)
{
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ec 01       	movw	r28, r24
     6c8:	16 2f       	mov	r17, r22

	while(* ptr!= '\0')
     6ca:	88 81       	ld	r24, Y
     6cc:	88 23       	and	r24, r24
     6ce:	39 f0       	breq	.+14     	; 0x6de <lcd_dispString+0x1e>
     6d0:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_displayChar(* ptr,LcdID);
     6d2:	61 2f       	mov	r22, r17
     6d4:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>


void lcd_dispString( u8 * ptr,u8 LcdID)
{

	while(* ptr!= '\0')
     6d8:	89 91       	ld	r24, Y+
     6da:	81 11       	cpse	r24, r1
     6dc:	fa cf       	rjmp	.-12     	; 0x6d2 <lcd_dispString+0x12>
		lcd_displayChar(* ptr,LcdID);
		ptr++;
		
	}

}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	08 95       	ret

000006e6 <lcd_disp_string_xy>:

void lcd_disp_string_xy(u8 * ptr , u8 y , u8 x, u8 LcdID)
{
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ec 01       	movw	r28, r24
     6ee:	86 2f       	mov	r24, r22
     6f0:	64 2f       	mov	r22, r20
     6f2:	12 2f       	mov	r17, r18
	lcd_gotoxy(y,x,LcdID);
     6f4:	42 2f       	mov	r20, r18
     6f6:	0e 94 42 03 	call	0x684	; 0x684 <lcd_gotoxy>
	lcd_dispString(ptr,LcdID);
     6fa:	61 2f       	mov	r22, r17
     6fc:	ce 01       	movw	r24, r28
     6fe:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_dispString>
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	08 95       	ret

0000070a <lcd_disp_int>:

void lcd_disp_int(u8 num,u8 LcdID)
{
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	60 97       	sbiw	r28, 0x10	; 16
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	d6 2e       	mov	r13, r22
	u8 dispNum[16];
	u8 LoopIndex = 0;
	u8 ArrayIndex;
	
	if (num == 0)
     72a:	81 11       	cpse	r24, r1
     72c:	04 c0       	rjmp	.+8      	; 0x736 <lcd_disp_int+0x2c>
	{
		lcd_displayChar(48,LcdID);
     72e:	80 e3       	ldi	r24, 0x30	; 48
     730:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>
     734:	37 c0       	rjmp	.+110    	; 0x7a4 <lcd_disp_int+0x9a>
{
	u8 dispNum[16];
	u8 LoopIndex = 0;
	u8 ArrayIndex;
	
	if (num == 0)
     736:	90 e0       	ldi	r25, 0x00	; 0
	}
	else 
	{
		while (num != 0)
		{
			dispNum[LoopIndex++] = num%10 + 48;
     738:	5d ec       	ldi	r21, 0xCD	; 205
     73a:	31 e0       	ldi	r19, 0x01	; 1
     73c:	39 0f       	add	r19, r25
     73e:	e1 e0       	ldi	r30, 0x01	; 1
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	ec 0f       	add	r30, r28
     744:	fd 1f       	adc	r31, r29
     746:	e9 0f       	add	r30, r25
     748:	f1 1d       	adc	r31, r1
     74a:	85 9f       	mul	r24, r21
     74c:	91 2d       	mov	r25, r1
     74e:	11 24       	eor	r1, r1
     750:	96 95       	lsr	r25
     752:	96 95       	lsr	r25
     754:	96 95       	lsr	r25
     756:	29 2f       	mov	r18, r25
     758:	22 0f       	add	r18, r18
     75a:	42 2f       	mov	r20, r18
     75c:	44 0f       	add	r20, r20
     75e:	44 0f       	add	r20, r20
     760:	24 0f       	add	r18, r20
     762:	82 1b       	sub	r24, r18
     764:	80 5d       	subi	r24, 0xD0	; 208
     766:	80 83       	st	Z, r24
			num /= 10;
     768:	89 2f       	mov	r24, r25
	{
		lcd_displayChar(48,LcdID);
	}
	else 
	{
		while (num != 0)
     76a:	99 23       	and	r25, r25
     76c:	11 f0       	breq	.+4      	; 0x772 <lcd_disp_int+0x68>
		{
			dispNum[LoopIndex++] = num%10 + 48;
     76e:	93 2f       	mov	r25, r19
     770:	e4 cf       	rjmp	.-56     	; 0x73a <lcd_disp_int+0x30>
			num /= 10;
		}
		
		for (ArrayIndex = 0; ArrayIndex < LoopIndex; ArrayIndex++)
     772:	33 23       	and	r19, r19
     774:	b9 f0       	breq	.+46     	; 0x7a4 <lcd_disp_int+0x9a>
     776:	e3 2e       	mov	r14, r19
     778:	f1 2c       	mov	r15, r1
     77a:	01 e0       	ldi	r16, 0x01	; 1
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	0c 0f       	add	r16, r28
     780:	1d 1f       	adc	r17, r29
     782:	0e 0d       	add	r16, r14
     784:	1f 1d       	adc	r17, r15
     786:	ec 0e       	add	r14, r28
     788:	fd 1e       	adc	r15, r29
     78a:	31 50       	subi	r19, 0x01	; 1
     78c:	e3 1a       	sub	r14, r19
     78e:	f1 08       	sbc	r15, r1
     790:	01 50       	subi	r16, 0x01	; 1
     792:	11 09       	sbc	r17, r1
		{
			lcd_displayChar(dispNum[LoopIndex-ArrayIndex-1],LcdID);
     794:	6d 2d       	mov	r22, r13
     796:	f8 01       	movw	r30, r16
     798:	80 81       	ld	r24, Z
     79a:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>
		{
			dispNum[LoopIndex++] = num%10 + 48;
			num /= 10;
		}
		
		for (ArrayIndex = 0; ArrayIndex < LoopIndex; ArrayIndex++)
     79e:	0e 15       	cp	r16, r14
     7a0:	1f 05       	cpc	r17, r15
     7a2:	b1 f7       	brne	.-20     	; 0x790 <lcd_disp_int+0x86>
		{
			lcd_displayChar(dispNum[LoopIndex-ArrayIndex-1],LcdID);
		}
	}
	
}
     7a4:	60 96       	adiw	r28, 0x10	; 16
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	08 95       	ret

000007c0 <lcd_disp_float>:

void lcd_disp_float(float num,u8 LcdID){
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	6b 01       	movw	r12, r22
     7ce:	7c 01       	movw	r14, r24
     7d0:	c4 2f       	mov	r28, r20
	
	float floatPart = ((num-(u8)num)*100);
     7d2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fixunssfsi>
     7d6:	d6 2f       	mov	r29, r22
	lcd_disp_int((u8)num,LcdID);
     7d8:	6c 2f       	mov	r22, r28
     7da:	8d 2f       	mov	r24, r29
     7dc:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
	lcd_displayChar('.',LcdID);
     7e0:	6c 2f       	mov	r22, r28
     7e2:	8e e2       	ldi	r24, 0x2E	; 46
     7e4:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>
	
}

void lcd_disp_float(float num,u8 LcdID){
	
	float floatPart = ((num-(u8)num)*100);
     7e8:	6d 2f       	mov	r22, r29
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatsisf>
     7f4:	9b 01       	movw	r18, r22
     7f6:	ac 01       	movw	r20, r24
     7f8:	c7 01       	movw	r24, r14
     7fa:	b6 01       	movw	r22, r12
     7fc:	0e 94 3f 09 	call	0x127e	; 0x127e <__subsf3>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	48 ec       	ldi	r20, 0xC8	; 200
     806:	52 e4       	ldi	r21, 0x42	; 66
     808:	0e 94 c6 0a 	call	0x158c	; 0x158c <__mulsf3>
	lcd_disp_int((u8)num,LcdID);
	lcd_displayChar('.',LcdID);
	lcd_disp_int((u8)floatPart,LcdID);	
     80c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fixunssfsi>
     810:	86 2f       	mov	r24, r22
     812:	6c 2f       	mov	r22, r28
     814:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret

00000826 <LM35_Init>:
#include "../StdTypes.h"


void LM35_Init()
{
	ADC_Init();
     826:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
     82a:	08 95       	ret

0000082c <LM35_TempRead>:
float LM35_TempRead()
{
	u16 temp;
	float y;
	
	temp = read_adc(0);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 55 00 	call	0xaa	; 0xaa <read_adc>
     832:	90 e0       	ldi	r25, 0x00	; 0
	y= (temp*5)/1023.0;
     834:	bc 01       	movw	r22, r24
     836:	66 0f       	add	r22, r22
     838:	77 1f       	adc	r23, r23
     83a:	66 0f       	add	r22, r22
     83c:	77 1f       	adc	r23, r23
     83e:	68 0f       	add	r22, r24
     840:	79 1f       	adc	r23, r25
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 38 0a 	call	0x1470	; 0x1470 <__floatunsisf>
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 ec       	ldi	r19, 0xC0	; 192
     84e:	4f e7       	ldi	r20, 0x7F	; 127
     850:	54 e4       	ldi	r21, 0x44	; 68
     852:	0e 94 a4 09 	call	0x1348	; 0x1348 <__divsf3>
	y *= 100;
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	48 ec       	ldi	r20, 0xC8	; 200
     85c:	52 e4       	ldi	r21, 0x42	; 66
     85e:	0e 94 c6 0a 	call	0x158c	; 0x158c <__mulsf3>
	return y;
     862:	08 95       	ret

00000864 <RTC_Init>:
#include "../I2C/I2C.h"


void RTC_Init()
{
	TWI_Init();
     864:	0e 94 33 01 	call	0x266	; 0x266 <TWI_Init>
     868:	08 95       	ret

0000086a <RTC_getHours>:
}

u8 RTC_getHours()
{
     86a:	cf 93       	push	r28
	u8 hr;
	TWI_Start();
     86c:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD0);
     870:	80 ed       	ldi	r24, 0xD0	; 208
     872:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Write(HR_ADDRESS);
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Start();
     87c:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD1);
     880:	81 ed       	ldi	r24, 0xD1	; 209
     882:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	hr = TWI_Read_With_NACK();
     886:	0e 94 4b 01 	call	0x296	; 0x296 <TWI_Read_With_NACK>
     88a:	c8 2f       	mov	r28, r24
	TWI_Stop();
     88c:	0e 94 41 01 	call	0x282	; 0x282 <TWI_Stop>
	hr = (hr&0x0F)+((hr&0x30)>>4)*10;
     890:	9c 2f       	mov	r25, r28
     892:	9f 70       	andi	r25, 0x0F	; 15
     894:	c0 73       	andi	r28, 0x30	; 48
     896:	c6 95       	lsr	r28
     898:	c6 95       	lsr	r28
     89a:	c6 95       	lsr	r28
     89c:	8c 2f       	mov	r24, r28
     89e:	88 0f       	add	r24, r24
     8a0:	88 0f       	add	r24, r24
     8a2:	8c 0f       	add	r24, r28
	return hr;
}
     8a4:	89 0f       	add	r24, r25
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <RTC_getSeconds>:
u8 RTC_getSeconds()
{
     8aa:	cf 93       	push	r28
	u8 hr;
	TWI_Start();
     8ac:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD0);
     8b0:	80 ed       	ldi	r24, 0xD0	; 208
     8b2:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Write(SEC_ADDRESS);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Start();
     8bc:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD1);
     8c0:	81 ed       	ldi	r24, 0xD1	; 209
     8c2:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	hr = TWI_Read_With_NACK();
     8c6:	0e 94 4b 01 	call	0x296	; 0x296 <TWI_Read_With_NACK>
     8ca:	c8 2f       	mov	r28, r24
	TWI_Stop();
     8cc:	0e 94 41 01 	call	0x282	; 0x282 <TWI_Stop>
	hr = (hr&0x0f) + ((hr&0x70)>>4)*10;
     8d0:	9c 2f       	mov	r25, r28
     8d2:	9f 70       	andi	r25, 0x0F	; 15
     8d4:	c0 77       	andi	r28, 0x70	; 112
     8d6:	c6 95       	lsr	r28
     8d8:	c6 95       	lsr	r28
     8da:	c6 95       	lsr	r28
     8dc:	8c 2f       	mov	r24, r28
     8de:	88 0f       	add	r24, r24
     8e0:	88 0f       	add	r24, r24
     8e2:	8c 0f       	add	r24, r28
	return hr;
}
     8e4:	89 0f       	add	r24, r25
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <RTC_getMinutes>:
u8 RTC_getMinutes()
{
     8ea:	cf 93       	push	r28
	u8 hr;
	TWI_Start();
     8ec:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD0);
     8f0:	80 ed       	ldi	r24, 0xD0	; 208
     8f2:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Write(MIN_ADDRESS);
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Start();
     8fc:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD1);
     900:	81 ed       	ldi	r24, 0xD1	; 209
     902:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	hr = TWI_Read_With_NACK();
     906:	0e 94 4b 01 	call	0x296	; 0x296 <TWI_Read_With_NACK>
     90a:	c8 2f       	mov	r28, r24
	TWI_Stop();
     90c:	0e 94 41 01 	call	0x282	; 0x282 <TWI_Stop>
	hr = (hr&0x0f)+ ((hr&0x70)>>4)*10;
     910:	9c 2f       	mov	r25, r28
     912:	9f 70       	andi	r25, 0x0F	; 15
     914:	c0 77       	andi	r28, 0x70	; 112
     916:	c6 95       	lsr	r28
     918:	c6 95       	lsr	r28
     91a:	c6 95       	lsr	r28
     91c:	8c 2f       	mov	r24, r28
     91e:	88 0f       	add	r24, r24
     920:	88 0f       	add	r24, r24
     922:	8c 0f       	add	r24, r28
	return hr;
}
     924:	89 0f       	add	r24, r25
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <RTC_getDate>:
	TWI_Stop();
	hr = (hr&0x07);
	return hr;
}
u8 RTC_getDate()
{
     92a:	cf 93       	push	r28
	u8 hr;
	TWI_Start();
     92c:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD0);
     930:	80 ed       	ldi	r24, 0xD0	; 208
     932:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Write(DATE_ADDRESS);
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Start();
     93c:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD1);
     940:	81 ed       	ldi	r24, 0xD1	; 209
     942:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	hr = TWI_Read_With_NACK();
     946:	0e 94 4b 01 	call	0x296	; 0x296 <TWI_Read_With_NACK>
     94a:	c8 2f       	mov	r28, r24
	TWI_Stop();
     94c:	0e 94 41 01 	call	0x282	; 0x282 <TWI_Stop>
	hr = (hr&0x0f)+ ((hr&0x30)>>4)*10;
     950:	9c 2f       	mov	r25, r28
     952:	9f 70       	andi	r25, 0x0F	; 15
     954:	c0 73       	andi	r28, 0x30	; 48
     956:	c6 95       	lsr	r28
     958:	c6 95       	lsr	r28
     95a:	c6 95       	lsr	r28
     95c:	8c 2f       	mov	r24, r28
     95e:	88 0f       	add	r24, r24
     960:	88 0f       	add	r24, r24
     962:	8c 0f       	add	r24, r28
	return hr;
}
     964:	89 0f       	add	r24, r25
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <RTC_getMonth>:
u8 RTC_getMonth()
{
     96a:	cf 93       	push	r28
	u8 hr;
	TWI_Start();
     96c:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD0);
     970:	80 ed       	ldi	r24, 0xD0	; 208
     972:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Write(MONTH_ADDRESS);
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Start();
     97c:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD1);
     980:	81 ed       	ldi	r24, 0xD1	; 209
     982:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	hr = TWI_Read_With_NACK();
     986:	0e 94 4b 01 	call	0x296	; 0x296 <TWI_Read_With_NACK>
     98a:	c8 2f       	mov	r28, r24
	TWI_Stop();
     98c:	0e 94 41 01 	call	0x282	; 0x282 <TWI_Stop>
		hr = (hr&0x0f)+ ((hr&0x10)>>4)*10;
     990:	9c 2f       	mov	r25, r28
     992:	9f 70       	andi	r25, 0x0F	; 15
     994:	c2 95       	swap	r28
     996:	c1 70       	andi	r28, 0x01	; 1
     998:	cc 0f       	add	r28, r28
     99a:	8c 2f       	mov	r24, r28
     99c:	88 0f       	add	r24, r24
     99e:	88 0f       	add	r24, r24
     9a0:	8c 0f       	add	r24, r28
	return hr;
}
     9a2:	89 0f       	add	r24, r25
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <RTC_getYear>:
u8 RTC_getYear()
{
     9a8:	cf 93       	push	r28
	u8 hr;
	TWI_Start();
     9aa:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD0);
     9ae:	80 ed       	ldi	r24, 0xD0	; 208
     9b0:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Write(YEAR_ADDRESS);
     9b4:	86 e0       	ldi	r24, 0x06	; 6
     9b6:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	TWI_Start();
     9ba:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_Start>
	TWI_Write(0xD1);
     9be:	81 ed       	ldi	r24, 0xD1	; 209
     9c0:	0e 94 44 01 	call	0x288	; 0x288 <TWI_Write>
	hr = TWI_Read_With_NACK();
     9c4:	0e 94 4b 01 	call	0x296	; 0x296 <TWI_Read_With_NACK>
     9c8:	c8 2f       	mov	r28, r24
	TWI_Stop();
     9ca:	0e 94 41 01 	call	0x282	; 0x282 <TWI_Stop>
		hr = (hr&0x0f)+ ((hr&0xF0)>>4)*10;
     9ce:	9c 2f       	mov	r25, r28
     9d0:	9f 70       	andi	r25, 0x0F	; 15
     9d2:	c2 95       	swap	r28
     9d4:	cf 70       	andi	r28, 0x0F	; 15
     9d6:	cc 0f       	add	r28, r28
     9d8:	8c 2f       	mov	r24, r28
     9da:	88 0f       	add	r24, r24
     9dc:	88 0f       	add	r24, r24
     9de:	8c 0f       	add	r24, r28
	return hr;
}
     9e0:	89 0f       	add	r24, r25
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <SPI_vidInit>:
void SPI_vidInit(void)
{
	u8 u8LoopCount;
	
	#if (SPI_MSTR_OR_SLAVE == SPI_MASTER_EN)
		DIO_InitPortDirection(PB,0xFF,0xA0);	// MOSI,MISO,SCK Port direction
     9e6:	40 ea       	ldi	r20, 0xA0	; 160
     9e8:	6f ef       	ldi	r22, 0xFF	; 255
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
	{
		if(clk[u8LoopCount].u32TempFreq < SPI_InitConfig.u32MaxFreq)
     9f0:	40 91 c1 00 	lds	r20, 0x00C1
     9f4:	50 91 c2 00 	lds	r21, 0x00C2
     9f8:	60 91 c3 00 	lds	r22, 0x00C3
     9fc:	70 91 c4 00 	lds	r23, 0x00C4
     a00:	80 91 9e 00 	lds	r24, 0x009E
     a04:	90 91 9f 00 	lds	r25, 0x009F
     a08:	a0 91 a0 00 	lds	r26, 0x00A0
     a0c:	b0 91 a1 00 	lds	r27, 0x00A1
     a10:	84 17       	cp	r24, r20
     a12:	95 07       	cpc	r25, r21
     a14:	a6 07       	cpc	r26, r22
     a16:	b7 07       	cpc	r27, r23
     a18:	88 f0       	brcs	.+34     	; 0xa3c <SPI_vidInit+0x56>
     a1a:	e3 ea       	ldi	r30, 0xA3	; 163
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
	#else
		DIO_InitPortDirection(PB,0xFF,0x40);	// MISO Port direction
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
     a1e:	21 e0       	ldi	r18, 0x01	; 1
	{
		if(clk[u8LoopCount].u32TempFreq < SPI_InitConfig.u32MaxFreq)
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	a2 81       	ldd	r26, Z+2	; 0x02
     a26:	b3 81       	ldd	r27, Z+3	; 0x03
     a28:	84 17       	cp	r24, r20
     a2a:	95 07       	cpc	r25, r21
     a2c:	a6 07       	cpc	r26, r22
     a2e:	b7 07       	cpc	r27, r23
     a30:	30 f0       	brcs	.+12     	; 0xa3e <SPI_vidInit+0x58>
	#else
		DIO_InitPortDirection(PB,0xFF,0x40);	// MISO Port direction
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
     a32:	2f 5f       	subi	r18, 0xFF	; 255
     a34:	35 96       	adiw	r30, 0x05	; 5
     a36:	27 30       	cpi	r18, 0x07	; 7
     a38:	99 f7       	brne	.-26     	; 0xa20 <SPI_vidInit+0x3a>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <SPI_vidInit+0x58>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
		{
			break;
		}
	}
	
	SPCR_REG = 0X00;
     a3e:	1d b8       	out	0x0d, r1	; 13
	SPCR_REG |= SPI_MSTR_OR_SLAVE | SPI_EN | SPI_InitConfig.u8Mode | SPI_InitConfig.u8DataOrder|(clk[u8LoopCount].u8RegVal & 0x03);
     a40:	3d b1       	in	r19, 0x0d	; 13
     a42:	82 2f       	mov	r24, r18
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	20 91 c5 00 	lds	r18, 0x00C5
     a4a:	32 2b       	or	r19, r18
     a4c:	30 65       	ori	r19, 0x50	; 80
     a4e:	20 91 c6 00 	lds	r18, 0x00C6
     a52:	32 2b       	or	r19, r18
     a54:	fc 01       	movw	r30, r24
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	8e 0f       	add	r24, r30
     a60:	9f 1f       	adc	r25, r31
     a62:	fc 01       	movw	r30, r24
     a64:	e2 56       	subi	r30, 0x62	; 98
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	84 81       	ldd	r24, Z+4	; 0x04
     a6a:	28 2f       	mov	r18, r24
     a6c:	23 70       	andi	r18, 0x03	; 3
     a6e:	93 2f       	mov	r25, r19
     a70:	92 2b       	or	r25, r18
     a72:	9d b9       	out	0x0d, r25	; 13
	SPSR_REG = 0x00;
     a74:	1e b8       	out	0x0e, r1	; 14
	SPSR_REG |= (clk[u8LoopCount].u8RegVal >> 2); 
     a76:	9e b1       	in	r25, 0x0e	; 14
     a78:	86 95       	lsr	r24
     a7a:	86 95       	lsr	r24
     a7c:	89 2b       	or	r24, r25
     a7e:	8e b9       	out	0x0e, r24	; 14
     a80:	08 95       	ret

00000a82 <SPI_u8TransfereByte>:
}

u8 SPI_u8TransfereByte(u8 u8Byte)
{
		SPDR_REG = u8Byte;
     a82:	8f b9       	out	0x0f, r24	; 15
		while((SPSR_REG&(SPI_INT_FL))== 0x00)
     a84:	77 9b       	sbis	0x0e, 7	; 14
     a86:	fe cf       	rjmp	.-4      	; 0xa84 <SPI_u8TransfereByte+0x2>
		;
		u8Byte = SPDR_REG;
     a88:	8f b1       	in	r24, 0x0f	; 15
		return u8Byte;
}
     a8a:	08 95       	ret

00000a8c <getUARTRxData>:
	val = RTC_getYear();
	lcd_disp_int(val,LCD_ID0);
}

static void getUARTRxData()
{
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
	u8 LoopIndex;
	u8 right_pass = 1;
	
	for (LoopIndex = 0; LoopIndex < 6; LoopIndex++)
	{
		if (IS_DIGIT(newPassword[LoopIndex]) == 0)
     a98:	80 91 55 01 	lds	r24, 0x0155
     a9c:	80 53       	subi	r24, 0x30	; 48
     a9e:	8a 30       	cpi	r24, 0x0A	; 10
     aa0:	e8 f4       	brcc	.+58     	; 0xadc <getUARTRxData+0x50>
     aa2:	e6 e5       	ldi	r30, 0x56	; 86
     aa4:	f1 e0       	ldi	r31, 0x01	; 1
     aa6:	0b e5       	ldi	r16, 0x5B	; 91
     aa8:	11 e0       	ldi	r17, 0x01	; 1
     aaa:	81 91       	ld	r24, Z+
     aac:	80 53       	subi	r24, 0x30	; 48
     aae:	8a 30       	cpi	r24, 0x0A	; 10
     ab0:	a8 f4       	brcc	.+42     	; 0xadc <getUARTRxData+0x50>
static void getUARTRxData()
{
	u8 LoopIndex;
	u8 right_pass = 1;
	
	for (LoopIndex = 0; LoopIndex < 6; LoopIndex++)
     ab2:	e0 17       	cp	r30, r16
     ab4:	f1 07       	cpc	r31, r17
     ab6:	c9 f7       	brne	.-14     	; 0xaaa <getUARTRxData+0x1e>
     ab8:	c5 e5       	ldi	r28, 0x55	; 85
     aba:	d1 e0       	ldi	r29, 0x01	; 1
     abc:	0f 2e       	mov	r0, r31
     abe:	f8 e6       	ldi	r31, 0x68	; 104
     ac0:	ef 2e       	mov	r14, r31
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	ff 2e       	mov	r15, r31
     ac6:	f0 2d       	mov	r31, r0
	
	if (right_pass == 1)
	{
		for (LoopIndex = 0; LoopIndex < 6; LoopIndex++)
		{
			EEPROM_Write(PasswordAddresses[LoopIndex],newPassword[LoopIndex]);
     ac8:	69 91       	ld	r22, Y+
     aca:	f7 01       	movw	r30, r14
     acc:	81 91       	ld	r24, Z+
     ace:	7f 01       	movw	r14, r30
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_Write>
		}
	}
	
	if (right_pass == 1)
	{
		for (LoopIndex = 0; LoopIndex < 6; LoopIndex++)
     ad6:	c0 17       	cp	r28, r16
     ad8:	d1 07       	cpc	r29, r17
     ada:	b1 f7       	brne	.-20     	; 0xac8 <getUARTRxData+0x3c>
		{
			EEPROM_Write(PasswordAddresses[LoopIndex],newPassword[LoopIndex]);
		}
	}
	newPasswordReceived = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 4a 01 	sts	0x014A, r24
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	08 95       	ret

00000af0 <WelcomeScreen_Init>:
static void RTC_Update();

/* Functions definitions */
void WelcomeScreen_Init()
{
	currentScreen = WELCOME_SCREEN;
     af0:	10 92 69 01 	sts	0x0169, r1
	lcd_clrScreen(LCD_ID0);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clrScreen>
/* compute the length of the welcome sentence */
static u8 computeSentenceLength(u8 *ptr)
{
	u8 length = 0;
	
	while (*ptr != '\0')
     afa:	80 91 60 00 	lds	r24, 0x0060
     afe:	88 23       	and	r24, r24
     b00:	41 f0       	breq	.+16     	; 0xb12 <WelcomeScreen_Init+0x22>
     b02:	e1 e6       	ldi	r30, 0x61	; 97
     b04:	f0 e0       	ldi	r31, 0x00	; 0
}

/* compute the length of the welcome sentence */
static u8 computeSentenceLength(u8 *ptr)
{
	u8 length = 0;
     b06:	80 e0       	ldi	r24, 0x00	; 0
	
	while (*ptr != '\0')
	{
		length++;
     b08:	8f 5f       	subi	r24, 0xFF	; 255
/* compute the length of the welcome sentence */
static u8 computeSentenceLength(u8 *ptr)
{
	u8 length = 0;
	
	while (*ptr != '\0')
     b0a:	91 91       	ld	r25, Z+
     b0c:	91 11       	cpse	r25, r1
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <WelcomeScreen_Init+0x18>
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <WelcomeScreen_Init+0x24>
}

/* compute the length of the welcome sentence */
static u8 computeSentenceLength(u8 *ptr)
{
	u8 length = 0;
     b12:	80 e0       	ldi	r24, 0x00	; 0
/* Functions definitions */
void WelcomeScreen_Init()
{
	currentScreen = WELCOME_SCREEN;
	lcd_clrScreen(LCD_ID0);
	welcomeWordLength = computeSentenceLength(welcome);
     b14:	80 93 5e 01 	sts	0x015E, r24
     b18:	08 95       	ret

00000b1a <systemEntrySCN_Init>:
	lcd_disp_string_xy((u8*)"counting :",1,0,LCD_ID0);
	LockedSCN_Update(countTemp);
}
void systemEntrySCN_Init()
{
	currentScreen = SYSTEM_ENTRY_SCN;
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	80 93 69 01 	sts	0x0169, r24
	lcd_clrScreen(LCD_ID0);
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clrScreen>
	lcd_dispString((u8*)"1: change pass.",LCD_ID0);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	87 ec       	ldi	r24, 0xC7	; 199
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_dispString>
	lcd_disp_string_xy((u8*)"2: system entry",1,0,LCD_ID0);
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	87 ed       	ldi	r24, 0xD7	; 215
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
     b3e:	08 95       	ret

00000b40 <PasswordChangeSCN_Init>:
}
void PasswordChangeSCN_Init()
{
	currentScreen = NEW_PASS_SCN;
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	80 93 69 01 	sts	0x0169, r24
	lcd_clrScreen(LCD_ID0);
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clrScreen>
	lcd_disp_string_xy((u8*)"Enter new pass",0,0,LCD_ID0);
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	87 ee       	ldi	r24, 0xE7	; 231
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	lcd_disp_string_xy((u8*)"using UART",1,0,LCD_ID0);
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	86 ef       	ldi	r24, 0xF6	; 246
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	UART_receiveDataIntoBuffer(getUARTRxData,newPassword,PASSWORD_LENGTH);
     b68:	46 e0       	ldi	r20, 0x06	; 6
     b6a:	65 e5       	ldi	r22, 0x55	; 85
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	86 e4       	ldi	r24, 0x46	; 70
     b70:	95 e0       	ldi	r25, 0x05	; 5
     b72:	0e 94 f7 08 	call	0x11ee	; 0x11ee <UART_receiveDataIntoBuffer>
     b76:	08 95       	ret

00000b78 <PasswordEntrySCN_Update>:
	lcd_disp_string_xy((u8*)"T:",1,0,LCD_ID0);
	MainSCN_Update();
}

/* screen update functions */
void PasswordEntrySCN_Update(u8 trialsNumber){
     b78:	cf 93       	push	r28
     b7a:	c8 2f       	mov	r28, r24
	lcd_gotoxy(1,15,LCD_ID0);
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	6f e0       	ldi	r22, 0x0F	; 15
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 42 03 	call	0x684	; 0x684 <lcd_gotoxy>
	lcd_disp_int(trialsNumber,LCD_ID0);
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	8c 2f       	mov	r24, r28
     b8a:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
}
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <PasswordEntrySCN_Init>:
	lcd_clrScreen(LCD_ID0);
	welcomeWordLength = computeSentenceLength(welcome);
}
void PasswordEntrySCN_Init()
{
	currentScreen = PASSWORD_ENTRY;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 69 01 	sts	0x0169, r24
	TMGR_ChangeFunctionAndTime();
     b98:	0e 94 70 08 	call	0x10e0	; 0x10e0 <TMGR_ChangeFunctionAndTime>
	lcd_clrScreen(LCD_ID0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clrScreen>
	lcd_disp_string_xy((u8*)"password:",0,0,LCD_ID0);
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	lcd_disp_string_xy((u8*)"use KPD--Trial:",1,0,LCD_ID0);
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	8b e0       	ldi	r24, 0x0B	; 11
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	PasswordEntrySCN_Update(trialsNumber);
     bbe:	80 91 5d 01 	lds	r24, 0x015D
     bc2:	0e 94 bc 05 	call	0xb78	; 0xb78 <PasswordEntrySCN_Update>
     bc6:	08 95       	ret

00000bc8 <LockedSCN_Update>:
void PasswordEntrySCN_Update(u8 trialsNumber){
	lcd_gotoxy(1,15,LCD_ID0);
	lcd_disp_int(trialsNumber,LCD_ID0);
}
void LockedSCN_Update(u8 countValue)
{
     bc8:	cf 93       	push	r28
     bca:	c8 2f       	mov	r28, r24
	lcd_disp_string_xy((u8*)"  ",1,11,LCD_ID0);
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	4b e0       	ldi	r20, 0x0B	; 11
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	8b e1       	ldi	r24, 0x1B	; 27
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	lcd_gotoxy(1,11,LCD_ID0);
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	6b e0       	ldi	r22, 0x0B	; 11
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	0e 94 42 03 	call	0x684	; 0x684 <lcd_gotoxy>
	lcd_disp_int(countValue,LCD_ID0);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	8c 2f       	mov	r24, r28
     be8:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
}
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <LockedSCN_Init>:
	lcd_disp_string_xy((u8*)"use KPD--Trial:",1,0,LCD_ID0);
	PasswordEntrySCN_Update(trialsNumber);
}
void LockedSCN_Init()
{
	currentScreen = SYSTEM_LOCKED;
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	80 93 69 01 	sts	0x0169, r24
	TMGR_ChangeFunctionAndTime();
     bf6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <TMGR_ChangeFunctionAndTime>
	lcd_clrScreen(LCD_ID0);
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clrScreen>
	lcd_dispString((u8*)"system is locked",LCD_ID0);
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	8e e1       	ldi	r24, 0x1E	; 30
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_dispString>
	lcd_disp_string_xy((u8*)"counting :",1,0,LCD_ID0);
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	8f e2       	ldi	r24, 0x2F	; 47
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	LockedSCN_Update(countTemp);
     c18:	80 91 5b 01 	lds	r24, 0x015B
     c1c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LockedSCN_Update>
     c20:	08 95       	ret

00000c22 <welcomeScreen_Update>:
void welcomeScreen_Update()
{
	static s8 LoopIndex = 0;
	static u8 direction = MOVE_RIGHT;

	if (direction == MOVE_RIGHT)
     c22:	80 91 54 01 	lds	r24, 0x0154
     c26:	81 11       	cpse	r24, r1
     c28:	2c c0       	rjmp	.+88     	; 0xc82 <welcomeScreen_Update+0x60>
	{
		lcd_disp_string_xy(welcome,0,LoopIndex,LCD_ID0);
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	40 91 53 01 	lds	r20, 0x0153
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	80 e6       	ldi	r24, 0x60	; 96
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
		if (LoopIndex != 0)
     c3a:	40 91 53 01 	lds	r20, 0x0153
     c3e:	44 23       	and	r20, r20
     c40:	39 f0       	breq	.+14     	; 0xc50 <welcomeScreen_Update+0x2e>
		{
			lcd_disp_string_xy((u8*)" ",0,LoopIndex-1,LCD_ID0);
     c42:	41 50       	subi	r20, 0x01	; 1
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	8c e1       	ldi	r24, 0x1C	; 28
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
		}

		LoopIndex++;
     c50:	20 91 53 01 	lds	r18, 0x0153
     c54:	2f 5f       	subi	r18, 0xFF	; 255
     c56:	20 93 53 01 	sts	0x0153, r18
		
		if (LoopIndex > (LCD_WIDTH-welcomeWordLength))
     c5a:	40 91 5e 01 	lds	r20, 0x015E
     c5e:	33 27       	eor	r19, r19
     c60:	27 fd       	sbrc	r18, 7
     c62:	30 95       	com	r19
     c64:	80 e1       	ldi	r24, 0x10	; 16
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	84 1b       	sub	r24, r20
     c6a:	91 09       	sbc	r25, r1
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	3c f5       	brge	.+78     	; 0xcc0 <welcomeScreen_Update+0x9e>
		{
			direction = MOVE_LEFT;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 54 01 	sts	0x0154, r24
			LoopIndex = LCD_WIDTH-welcomeWordLength;
     c78:	80 e1       	ldi	r24, 0x10	; 16
     c7a:	84 1b       	sub	r24, r20
     c7c:	80 93 53 01 	sts	0x0153, r24
     c80:	08 95       	ret
		}
	}
	else
	{
		LoopIndex--;
     c82:	40 91 53 01 	lds	r20, 0x0153
     c86:	41 50       	subi	r20, 0x01	; 1
     c88:	40 93 53 01 	sts	0x0153, r20
		lcd_disp_string_xy(welcome,0,LoopIndex,LCD_ID0);
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	80 e6       	ldi	r24, 0x60	; 96
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
		lcd_disp_string_xy((u8*)" ",0,LoopIndex+welcomeWordLength,LCD_ID0);
     c98:	40 91 53 01 	lds	r20, 0x0153
     c9c:	80 91 5e 01 	lds	r24, 0x015E
     ca0:	48 0f       	add	r20, r24
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	8c e1       	ldi	r24, 0x1C	; 28
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
		
		if (LoopIndex == 0)
     cae:	80 91 53 01 	lds	r24, 0x0153
     cb2:	81 11       	cpse	r24, r1
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <welcomeScreen_Update+0x9e>
		{
			direction = MOVE_RIGHT;
     cb6:	10 92 54 01 	sts	0x0154, r1
			LoopIndex = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 53 01 	sts	0x0153, r24
     cc0:	08 95       	ret

00000cc2 <MainSCN_Update>:
		}
	}
}
void MainSCN_Update()
{
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15

/* Update the main screen functions */
static void LM35_Update()
{
	float temperature;
	temperature = LM35_TempRead();
     cca:	0e 94 16 04 	call	0x82c	; 0x82c <LM35_TempRead>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
	lcd_gotoxy(0,2,LCD_ID0);
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 42 03 	call	0x684	; 0x684 <lcd_gotoxy>
	lcd_disp_float(temperature,LCD_ID0);
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	c7 01       	movw	r24, r14
     ce0:	b6 01       	movw	r22, r12
     ce2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd_disp_float>
}

static void TC72_Update()
{
	float temperature;
	temperature = TC72_floatTempRead();
     ce6:	0e 94 36 08 	call	0x106c	; 0x106c <TC72_floatTempRead>
     cea:	6b 01       	movw	r12, r22
     cec:	7c 01       	movw	r14, r24
	lcd_gotoxy(1,2,LCD_ID0);
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	62 e0       	ldi	r22, 0x02	; 2
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	0e 94 42 03 	call	0x684	; 0x684 <lcd_gotoxy>
	lcd_disp_float(temperature,LCD_ID0);
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	c7 01       	movw	r24, r14
     cfc:	b6 01       	movw	r22, r12
     cfe:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd_disp_float>

static void RTC_Update()
{
	u8 val;
	
	lcd_gotoxy(0,8,LCD_ID0);
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	68 e0       	ldi	r22, 0x08	; 8
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0e 94 42 03 	call	0x684	; 0x684 <lcd_gotoxy>
	val = RTC_getHours();
     d0c:	0e 94 35 04 	call	0x86a	; 0x86a <RTC_getHours>
	lcd_disp_int(val,LCD_ID0);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
	lcd_displayChar(':',LCD_ID0);
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	8a e3       	ldi	r24, 0x3A	; 58
     d1a:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>
	val = RTC_getMinutes();
     d1e:	0e 94 75 04 	call	0x8ea	; 0x8ea <RTC_getMinutes>
	lcd_disp_int(val,LCD_ID0);
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
	lcd_displayChar(':',LCD_ID0);
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	8a e3       	ldi	r24, 0x3A	; 58
     d2c:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>
	val = RTC_getSeconds();
     d30:	0e 94 55 04 	call	0x8aa	; 0x8aa <RTC_getSeconds>
	lcd_disp_int(val,LCD_ID0);
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>

	lcd_gotoxy(1,8,LCD_ID0);
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	68 e0       	ldi	r22, 0x08	; 8
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	0e 94 42 03 	call	0x684	; 0x684 <lcd_gotoxy>
	val = RTC_getDate();
     d44:	0e 94 95 04 	call	0x92a	; 0x92a <RTC_getDate>
	lcd_disp_int(val,LCD_ID0);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
	lcd_displayChar('/',LCD_ID0);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	8f e2       	ldi	r24, 0x2F	; 47
     d52:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>
	val = RTC_getMonth();
     d56:	0e 94 b5 04 	call	0x96a	; 0x96a <RTC_getMonth>
	lcd_disp_int(val,LCD_ID0);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
	lcd_displayChar('/',LCD_ID0);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	8f e2       	ldi	r24, 0x2F	; 47
     d64:	0e 94 10 03 	call	0x620	; 0x620 <lcd_displayChar>
	val = RTC_getYear();
     d68:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <RTC_getYear>
	lcd_disp_int(val,LCD_ID0);
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_disp_int>
void MainSCN_Update()
{
	LM35_Update();
	TC72_Update();
	RTC_Update();
}
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <MainSCN_Init>:
	lcd_disp_string_xy((u8*)"using UART",1,0,LCD_ID0);
	UART_receiveDataIntoBuffer(getUARTRxData,newPassword,PASSWORD_LENGTH);
}
void MainSCN_Init()
{
	currentScreen = MAIN_SCN;
     d7c:	85 e0       	ldi	r24, 0x05	; 5
     d7e:	80 93 69 01 	sts	0x0169, r24
	lcd_clrScreen(LCD_ID0);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clrScreen>
	lcd_disp_string_xy((u8*)"L:",0,0,LCD_ID0);
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	8a e3       	ldi	r24, 0x3A	; 58
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	lcd_disp_string_xy((u8*)"T:",1,0,LCD_ID0);
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	8d e3       	ldi	r24, 0x3D	; 61
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
	MainSCN_Update();
     da4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MainSCN_Update>
     da8:	08 95       	ret

00000daa <LockedSCN_CounterDecrement>:
}

/* call back function to decrement the counter when the system is locked */
void LockedSCN_CounterDecrement()
{
	if (currentScreen == SYSTEM_LOCKED)
     daa:	80 91 69 01 	lds	r24, 0x0169
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	91 f4       	brne	.+36     	; 0xdd6 <LockedSCN_CounterDecrement+0x2c>
	{
		countTemp--;
     db2:	80 91 5b 01 	lds	r24, 0x015B
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	80 93 5b 01 	sts	0x015B, r24
		if (countTemp == 0)
     dbc:	81 11       	cpse	r24, r1
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <LockedSCN_CounterDecrement+0x1c>
		{
			PasswordEntrySCN_Init();
     dc0:	0e 94 c9 05 	call	0xb92	; 0xb92 <PasswordEntrySCN_Init>
     dc4:	08 95       	ret
		}
		else 
		{
			LockedSCN_Update(countTemp);
     dc6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LockedSCN_Update>
			EEPROM_Write(COUNTING_TEMP_ADDRESS,countTemp);
     dca:	60 91 5b 01 	lds	r22, 0x015B
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_Write>
     dd6:	08 95       	ret

00000dd8 <system_vidInitialize>:

/* load the last state of the system */
void system_vidInitialize()
{
	u8 val;
	val = EEPROM_Read(SCN_ADDRESS);
     dd8:	80 e3       	ldi	r24, 0x30	; 48
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>

	if (val == SYSTEM_LOCKED)
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	a9 f4       	brne	.+42     	; 0xe0e <system_vidInitialize+0x36>
	{
		trialsNumber =  EEPROM_Read(TRIALS_ADDRESS);
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>
     dec:	80 93 5d 01 	sts	0x015D, r24
		countValue = EEPROM_Read(COUNTING_ADDRESS);
     df0:	87 e0       	ldi	r24, 0x07	; 7
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>
     df8:	80 93 5c 01 	sts	0x015C, r24
		countTemp = EEPROM_Read(COUNTING_TEMP_ADDRESS);
     dfc:	88 e0       	ldi	r24, 0x08	; 8
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>
     e04:	80 93 5b 01 	sts	0x015B, r24
		LockedSCN_Init();
     e08:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <LockedSCN_Init>
     e0c:	08 95       	ret
	}
	else if (val == PASSWORD_ENTRY )
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	a9 f4       	brne	.+42     	; 0xe3c <system_vidInitialize+0x64>
	{
		trialsNumber =  EEPROM_Read(TRIALS_ADDRESS);
     e12:	86 e0       	ldi	r24, 0x06	; 6
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>
     e1a:	80 93 5d 01 	sts	0x015D, r24
		countValue = EEPROM_Read(COUNTING_ADDRESS);
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>
     e26:	80 93 5c 01 	sts	0x015C, r24
		countTemp = EEPROM_Read(COUNTING_TEMP_ADDRESS);
     e2a:	88 e0       	ldi	r24, 0x08	; 8
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>
     e32:	80 93 5b 01 	sts	0x015B, r24
		PasswordEntrySCN_Init();
     e36:	0e 94 c9 05 	call	0xb92	; 0xb92 <PasswordEntrySCN_Init>
     e3a:	08 95       	ret
	}
	else
	{
		WelcomeScreen_Init();
     e3c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <WelcomeScreen_Init>
		trialsNumber = 0;
     e40:	10 92 5d 01 	sts	0x015D, r1
		countTemp = 0;
     e44:	10 92 5b 01 	sts	0x015B, r1
		countValue = 0;
     e48:	10 92 5c 01 	sts	0x015C, r1
     e4c:	08 95       	ret

00000e4e <u8Check_Password>:
	}
}

/* compare the entered password with the default and the saved one */
u8 u8Check_Password(u8* password)
{
     e4e:	6f 92       	push	r6
     e50:	7f 92       	push	r7
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	08 e6       	ldi	r16, 0x68	; 104
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	ec 01       	movw	r28, r24
     e70:	0f 2e       	mov	r0, r31
     e72:	fe e6       	ldi	r31, 0x6E	; 110
     e74:	ef 2e       	mov	r14, r31
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	ff 2e       	mov	r15, r31
     e7a:	f0 2d       	mov	r31, r0
     e7c:	0f 2e       	mov	r0, r31
     e7e:	fe e6       	ldi	r31, 0x6E	; 110
     e80:	af 2e       	mov	r10, r31
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	bf 2e       	mov	r11, r31
     e86:	f0 2d       	mov	r31, r0
	u8 LoopIndex;
	u8 passwordFlg = 1;
	u8 defaultFlg = 1;
     e88:	66 24       	eor	r6, r6
     e8a:	63 94       	inc	r6

/* compare the entered password with the default and the saved one */
u8 u8Check_Password(u8* password)
{
	u8 LoopIndex;
	u8 passwordFlg = 1;
     e8c:	77 24       	eor	r7, r7
     e8e:	73 94       	inc	r7
	u8 RetVal;
	for (LoopIndex = 0; LoopIndex < PASSWORD_LENGTH ; LoopIndex++)
	{
		if (password[LoopIndex] != EEPROM_Read(PasswordAddresses[LoopIndex]))
		{
			passwordFlg = 0;
     e90:	81 2c       	mov	r8, r1
     e92:	6e 01       	movw	r12, r28
	u8 passwordFlg = 1;
	u8 defaultFlg = 1;
	u8 RetVal;
	for (LoopIndex = 0; LoopIndex < PASSWORD_LENGTH ; LoopIndex++)
	{
		if (password[LoopIndex] != EEPROM_Read(PasswordAddresses[LoopIndex]))
     e94:	98 80       	ld	r9, Y
     e96:	f8 01       	movw	r30, r16
     e98:	81 91       	ld	r24, Z+
     e9a:	8f 01       	movw	r16, r30
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 2c 01 	call	0x258	; 0x258 <EEPROM_Read>
     ea2:	98 12       	cpse	r9, r24
		{
			passwordFlg = 0;
     ea4:	78 2c       	mov	r7, r8
     ea6:	21 96       	adiw	r28, 0x01	; 1
		}
		if (password[LoopIndex] != defaultPassword[LoopIndex])
     ea8:	f7 01       	movw	r30, r14
     eaa:	81 91       	ld	r24, Z+
     eac:	7f 01       	movw	r14, r30
     eae:	f6 01       	movw	r30, r12
     eb0:	90 81       	ld	r25, Z
     eb2:	98 13       	cpse	r25, r24
		{
			defaultFlg = 0;
     eb4:	68 2c       	mov	r6, r8
{
	u8 LoopIndex;
	u8 passwordFlg = 1;
	u8 defaultFlg = 1;
	u8 RetVal;
	for (LoopIndex = 0; LoopIndex < PASSWORD_LENGTH ; LoopIndex++)
     eb6:	0a 15       	cp	r16, r10
     eb8:	1b 05       	cpc	r17, r11
     eba:	59 f7       	brne	.-42     	; 0xe92 <u8Check_Password+0x44>
		if (password[LoopIndex] != defaultPassword[LoopIndex])
		{
			defaultFlg = 0;
		}
	}
	if (passwordFlg || defaultFlg)
     ebc:	71 10       	cpse	r7, r1
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <u8Check_Password+0x7c>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	61 10       	cpse	r6, r1
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <u8Check_Password+0x7e>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <u8Check_Password+0x7e>
	{
		RetVal = RIGHT_PASSWORD;
     eca:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		RetVal = WRONG_PASSWORD;
	}
	return RetVal;
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	7f 90       	pop	r7
     ee6:	6f 90       	pop	r6
     ee8:	08 95       	ret

00000eea <KPD_PasswordEntered>:
	}
}

/* KPD button is pressed in the password entry screen */
void KPD_PasswordEntered()
{
     eea:	cf 93       	push	r28
	u8 KeypadInput;
	static u8 passCount = 0;
	static u8 passEntered[6];
	
	KeypadInput = KPD_Getkey(KPD_ID0);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 8b 01 	call	0x316	; 0x316 <KPD_Getkey>
     ef2:	c8 2f       	mov	r28, r24

	if (IS_DIGIT(KeypadInput))
     ef4:	80 ed       	ldi	r24, 0xD0	; 208
     ef6:	8c 0f       	add	r24, r28
     ef8:	8a 30       	cpi	r24, 0x0A	; 10
     efa:	b8 f4       	brcc	.+46     	; 0xf2a <KPD_PasswordEntered+0x40>
	{
		if (passCount < 6)
     efc:	40 91 52 01 	lds	r20, 0x0152
     f00:	46 30       	cpi	r20, 0x06	; 6
     f02:	08 f0       	brcs	.+2      	; 0xf06 <KPD_PasswordEntered+0x1c>
     f04:	5e c0       	rjmp	.+188    	; 0xfc2 <KPD_PasswordEntered+0xd8>
		{
			lcd_disp_string_xy((u8*)"*",0,10+passCount,LCD_ID0);
     f06:	46 5f       	subi	r20, 0xF6	; 246
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	80 e4       	ldi	r24, 0x40	; 64
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
			passEntered[passCount] = KeypadInput;
     f14:	80 91 52 01 	lds	r24, 0x0152
     f18:	e8 2f       	mov	r30, r24
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	e4 5b       	subi	r30, 0xB4	; 180
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	c0 83       	st	Z, r28
			passCount++;
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 52 01 	sts	0x0152, r24
     f28:	4c c0       	rjmp	.+152    	; 0xfc2 <KPD_PasswordEntered+0xd8>
		}
	}
	else if (KeypadInput == '*' && passCount != 0)
     f2a:	ca 32       	cpi	r28, 0x2A	; 42
     f2c:	91 f4       	brne	.+36     	; 0xf52 <KPD_PasswordEntered+0x68>
     f2e:	40 91 52 01 	lds	r20, 0x0152
     f32:	44 23       	and	r20, r20
     f34:	09 f4       	brne	.+2      	; 0xf38 <KPD_PasswordEntered+0x4e>
     f36:	45 c0       	rjmp	.+138    	; 0xfc2 <KPD_PasswordEntered+0xd8>
	{
		lcd_disp_string_xy((u8*)" ",0,9+passCount,LCD_ID0);
     f38:	47 5f       	subi	r20, 0xF7	; 247
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	8c e1       	ldi	r24, 0x1C	; 28
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	0e 94 73 03 	call	0x6e6	; 0x6e6 <lcd_disp_string_xy>
		passCount--;
     f46:	80 91 52 01 	lds	r24, 0x0152
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	80 93 52 01 	sts	0x0152, r24
     f50:	38 c0       	rjmp	.+112    	; 0xfc2 <KPD_PasswordEntered+0xd8>
	}
	else if (KeypadInput == '#' && passCount == 6)
     f52:	c3 32       	cpi	r28, 0x23	; 35
     f54:	b1 f5       	brne	.+108    	; 0xfc2 <KPD_PasswordEntered+0xd8>
     f56:	80 91 52 01 	lds	r24, 0x0152
     f5a:	86 30       	cpi	r24, 0x06	; 6
     f5c:	91 f5       	brne	.+100    	; 0xfc2 <KPD_PasswordEntered+0xd8>
	{
		u8 passwordRight;
		passwordRight = u8Check_Password(passEntered);
     f5e:	8c e4       	ldi	r24, 0x4C	; 76
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 27 07 	call	0xe4e	; 0xe4e <u8Check_Password>
		
		if (passwordRight == RIGHT_PASSWORD)
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	19 f4       	brne	.+6      	; 0xf70 <KPD_PasswordEntered+0x86>
		{
			systemEntrySCN_Init();
     f6a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <systemEntrySCN_Init>
     f6e:	29 c0       	rjmp	.+82     	; 0xfc2 <KPD_PasswordEntered+0xd8>
		}
		else
		{
			if (trialsNumber == 2)
     f70:	80 91 5d 01 	lds	r24, 0x015D
     f74:	82 30       	cpi	r24, 0x02	; 2
     f76:	d1 f4       	brne	.+52     	; 0xfac <KPD_PasswordEntered+0xc2>
			{
				trialsNumber = 0;
     f78:	10 92 5d 01 	sts	0x015D, r1
				countValue += 5;
     f7c:	80 91 5c 01 	lds	r24, 0x015C
     f80:	8b 5f       	subi	r24, 0xFB	; 251
     f82:	80 93 5c 01 	sts	0x015C, r24
				countTemp = countValue;
     f86:	80 93 5b 01 	sts	0x015B, r24
				passCount = 0;
     f8a:	10 92 52 01 	sts	0x0152, r1
				LockedSCN_Init();
     f8e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <LockedSCN_Init>
				EEPROM_Write(COUNTING_ADDRESS,countValue);
     f92:	60 91 5c 01 	lds	r22, 0x015C
     f96:	87 e0       	ldi	r24, 0x07	; 7
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_Write>
				EEPROM_Write(COUNTING_TEMP_ADDRESS,countTemp);
     f9e:	60 91 5b 01 	lds	r22, 0x015B
     fa2:	88 e0       	ldi	r24, 0x08	; 8
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_Write>
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <KPD_PasswordEntered+0xcc>
			}
			else
			{
				trialsNumber++;
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	80 93 5d 01 	sts	0x015D, r24
				PasswordEntrySCN_Update(trialsNumber);
     fb2:	0e 94 bc 05 	call	0xb78	; 0xb78 <PasswordEntrySCN_Update>
			}
			EEPROM_Write(TRIALS_ADDRESS,trialsNumber);
     fb6:	60 91 5d 01 	lds	r22, 0x015D
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_Write>
		}
	}
}
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <Read_Or_Write>:
#include "../SPI/SPI.h"
#include "../DIO/DIO.h"
#include "TC72_Lcfg.h"

static u8 Read_Or_Write(u8 u8Address)
{
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	f8 2e       	mov	r15, r24
	u8 val;
	DIO_WritePort(TC72_ConfigData.TC72_CE_Port,0xFF,TC72_ConfigData.TC72_CE_Mask);
     fd2:	09 e9       	ldi	r16, 0x99	; 153
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	c8 e9       	ldi	r28, 0x98	; 152
     fd8:	d0 e0       	ldi	r29, 0x00	; 0
     fda:	f8 01       	movw	r30, r16
     fdc:	40 81       	ld	r20, Z
     fde:	6f ef       	ldi	r22, 0xFF	; 255
     fe0:	88 81       	ld	r24, Y
     fe2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	SPI_u8TransfereByte(u8Address);
     fe6:	8f 2d       	mov	r24, r15
     fe8:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_u8TransfereByte>
	val = SPI_u8TransfereByte(0x00);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	0e 94 41 05 	call	0xa82	; 0xa82 <SPI_u8TransfereByte>
     ff2:	f8 2e       	mov	r15, r24
	DIO_WritePort(TC72_ConfigData.TC72_CE_Port,0x00,TC72_ConfigData.TC72_CE_Mask);
     ff4:	f8 01       	movw	r30, r16
     ff6:	40 81       	ld	r20, Z
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	88 81       	ld	r24, Y
     ffc:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_WritePort>
	return val;
}
    1000:	8f 2d       	mov	r24, r15
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	08 95       	ret

0000100e <TC72_Init>:

void TC72_Init(u8 u8Mode)
{
    100e:	cf 93       	push	r28
    1010:	c8 2f       	mov	r28, r24
	SPI_vidInit();
    1012:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <SPI_vidInit>
	DIO_InitPortDirection(TC72_ConfigData.TC72_CE_Port,0xFF,TC72_ConfigData.TC72_CE_Mask);
    1016:	40 91 99 00 	lds	r20, 0x0099
    101a:	6f ef       	ldi	r22, 0xFF	; 255
    101c:	80 91 98 00 	lds	r24, 0x0098
    1020:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_InitPortDirection>
	if (u8Mode == TC72_MODE_ONE_SHOT)
    1024:	c1 30       	cpi	r28, 0x01	; 1
    1026:	39 f4       	brne	.+14     	; 0x1036 <TC72_Init+0x28>
	{
		Read_Or_Write(0x80);
    1028:	80 e8       	ldi	r24, 0x80	; 128
    102a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Read_Or_Write>
		Read_Or_Write(0x15);
    102e:	85 e1       	ldi	r24, 0x15	; 21
    1030:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Read_Or_Write>
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <TC72_Init+0x38>
	}
	else if (u8Mode == TC72_MODE_CONT)
    1036:	c1 11       	cpse	r28, r1
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <TC72_Init+0x38>
	{
		Read_Or_Write(0x80);
    103a:	80 e8       	ldi	r24, 0x80	; 128
    103c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Read_Or_Write>
		Read_Or_Write(0x04);
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Read_Or_Write>
	}
}
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <TC72_TempRead>:

u16 TC72_TempRead()
{
    104a:	cf 93       	push	r28
	u16 RetVal = 0x0000;
	u16 temp;
	temp = Read_Or_Write(0x02);
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Read_Or_Write>
    1052:	c8 2f       	mov	r28, r24
	RetVal |= (temp << 8);
	temp = Read_Or_Write(0x01);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Read_Or_Write>

u16 TC72_TempRead()
{
	u16 RetVal = 0x0000;
	u16 temp;
	temp = Read_Or_Write(0x02);
    105a:	2c 2f       	mov	r18, r28
    105c:	30 e0       	ldi	r19, 0x00	; 0
	RetVal |= (temp << 8);
    105e:	32 2f       	mov	r19, r18
    1060:	22 27       	eor	r18, r18
	temp = Read_Or_Write(0x01);
	RetVal |= temp;
	return RetVal;
}
    1062:	a9 01       	movw	r20, r18
    1064:	48 2b       	or	r20, r24
    1066:	ca 01       	movw	r24, r20
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <TC72_floatTempRead>:

float TC72_floatTempRead()
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
	u16 val;
	s8 val1;
	float RetVal;
	val = TC72_TempRead();
    1070:	0e 94 25 08 	call	0x104a	; 0x104a <TC72_TempRead>
    1074:	ec 01       	movw	r28, r24
	val1 = (val&0xFF00)>>8;
	RetVal = val1;
    1076:	6d 2f       	mov	r22, r29
    1078:	77 27       	eor	r23, r23
    107a:	67 fd       	sbrc	r22, 7
    107c:	70 95       	com	r23
    107e:	87 2f       	mov	r24, r23
    1080:	97 2f       	mov	r25, r23
    1082:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatsisf>
	if ((val&0x0080) != 0)
    1086:	c7 ff       	sbrs	r28, 7
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <TC72_floatTempRead+0x2c>
	{
		RetVal += 0.5;
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 40 09 	call	0x1280	; 0x1280 <__addsf3>
    1096:	13 c0       	rjmp	.+38     	; 0x10be <TC72_floatTempRead+0x52>
	}
	else if ((val&0x0040) != 0)
    1098:	c6 ff       	sbrs	r28, 6
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <TC72_floatTempRead+0x3e>
	{
		RetVal += 0.25;
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5e e3       	ldi	r21, 0x3E	; 62
    10a4:	0e 94 40 09 	call	0x1280	; 0x1280 <__addsf3>
    10a8:	0a c0       	rjmp	.+20     	; 0x10be <TC72_floatTempRead+0x52>
	}
	else if ((val&0x00C0) != 0)
    10aa:	c0 7c       	andi	r28, 0xC0	; 192
    10ac:	dd 27       	eor	r29, r29
    10ae:	cd 2b       	or	r28, r29
    10b0:	31 f0       	breq	.+12     	; 0x10be <TC72_floatTempRead+0x52>
	{
		RetVal += 0.75;
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e4       	ldi	r20, 0x40	; 64
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 40 09 	call	0x1280	; 0x1280 <__addsf3>
	}
	return RetVal;
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <TMGR_Cyclic1sCbkFn>:
	TMR_InitIsrEvery25ms(TMGR_Cyclic25msCbkFn);
}
	
void TMGR_Cyclic1sCbkFn(void)
{
	LockedSCN_CounterDecrement();
    10c4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <LockedSCN_CounterDecrement>
    10c8:	08 95       	ret

000010ca <TMGR_Cyclic25msCbkFn>:
}

void TMGR_Cyclic25msCbkFn(void)
{
	welcomeScreen_Update();
    10ca:	0e 94 11 06 	call	0xc22	; 0xc22 <welcomeScreen_Update>
    10ce:	08 95       	ret

000010d0 <TMGR_Init>:
#include "TMGR.h"
#include "../SYSTEM_SCNS.h"

void TMGR_Init(void)
{
	TMR_setCountCompare(3); // for 75 ms
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	0e 94 8d 08 	call	0x111a	; 0x111a <TMR_setCountCompare>
	TMR_InitIsrEvery25ms(TMGR_Cyclic25msCbkFn);
    10d6:	85 e6       	ldi	r24, 0x65	; 101
    10d8:	98 e0       	ldi	r25, 0x08	; 8
    10da:	0e 94 78 08 	call	0x10f0	; 0x10f0 <TMR_InitIsrEvery25ms>
    10de:	08 95       	ret

000010e0 <TMGR_ChangeFunctionAndTime>:
	welcomeScreen_Update();
}

void TMGR_ChangeFunctionAndTime(void)
{
	TMR_setCountCompare(40); //for 1 sec
    10e0:	88 e2       	ldi	r24, 0x28	; 40
    10e2:	0e 94 8d 08 	call	0x111a	; 0x111a <TMR_setCountCompare>
	TMR_FunctionCbkChange(TMGR_Cyclic1sCbkFn);
    10e6:	82 e6       	ldi	r24, 0x62	; 98
    10e8:	98 e0       	ldi	r25, 0x08	; 8
    10ea:	0e 94 88 08 	call	0x1110	; 0x1110 <TMR_FunctionCbkChange>
    10ee:	08 95       	ret

000010f0 <TMR_InitIsrEvery25ms>:
static u8 count = 0;
static u8 countCompare = 0;

void TMR_InitIsrEvery25ms(CylicCbkFnType CylicCbkFnPtr)
{
	sei();
    10f0:	78 94       	sei
	TCCR0 = 0x00;
    10f2:	13 be       	out	0x33, r1	; 51
	TCCR0 |= 1<< WGM01 | 1 << CS00 | 1<<CS02 ;
    10f4:	23 b7       	in	r18, 0x33	; 51
    10f6:	2d 60       	ori	r18, 0x0D	; 13
    10f8:	23 bf       	out	0x33, r18	; 51
	TIMSK = 0x00;
    10fa:	19 be       	out	0x39, r1	; 57
	OCR0 = 200;
    10fc:	28 ec       	ldi	r18, 0xC8	; 200
    10fe:	2c bf       	out	0x3c, r18	; 60
	TIMSK |= 1<<OCIE0;
    1100:	29 b7       	in	r18, 0x39	; 57
    1102:	22 60       	ori	r18, 0x02	; 2
    1104:	29 bf       	out	0x39, r18	; 57
	TMR_CylicFunPtr = CylicCbkFnPtr;
    1106:	90 93 62 01 	sts	0x0162, r25
    110a:	80 93 61 01 	sts	0x0161, r24
    110e:	08 95       	ret

00001110 <TMR_FunctionCbkChange>:
}

void TMR_FunctionCbkChange(CylicCbkFnType CylicCbkFnPtr)
{
	TMR_CylicFunPtr = CylicCbkFnPtr;
    1110:	90 93 62 01 	sts	0x0162, r25
    1114:	80 93 61 01 	sts	0x0161, r24
    1118:	08 95       	ret

0000111a <TMR_setCountCompare>:
}

void TMR_setCountCompare(u8 val)
{
	count = 0;
    111a:	10 92 60 01 	sts	0x0160, r1
	countCompare = val;
    111e:	80 93 5f 01 	sts	0x015F, r24
    1122:	08 95       	ret

00001124 <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
	count++;
    1146:	80 91 60 01 	lds	r24, 0x0160
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	80 93 60 01 	sts	0x0160, r24
	if (count == countCompare)
    1150:	90 91 5f 01 	lds	r25, 0x015F
    1154:	89 13       	cpse	r24, r25
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <__vector_10+0x42>
	{
		TMR_CylicFunPtr();
    1158:	e0 91 61 01 	lds	r30, 0x0161
    115c:	f0 91 62 01 	lds	r31, 0x0162
    1160:	09 95       	icall
		count = 0;
    1162:	10 92 60 01 	sts	0x0160, r1
	}
}
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <UART_vidInit>:
static u8 *bufferPtr;
static u8 bufferLength;
static u8 count = 0;

void UART_vidInit(void)
{
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
	u8 u8Ucsz2;
	u16 u16Ubrr;
	u16Ubrr = ((F_CPU/16)/(UART_CfgData.u32BaudRate))-1;
    118c:	00 91 42 01 	lds	r16, 0x0142
    1190:	10 91 43 01 	lds	r17, 0x0143
    1194:	20 91 44 01 	lds	r18, 0x0144
    1198:	30 91 45 01 	lds	r19, 0x0145
    119c:	60 e2       	ldi	r22, 0x20	; 32
    119e:	71 ea       	ldi	r23, 0xA1	; 161
    11a0:	87 e0       	ldi	r24, 0x07	; 7
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a9 01       	movw	r20, r18
    11a6:	98 01       	movw	r18, r16
    11a8:	0e 94 29 0b 	call	0x1652	; 0x1652 <__udivmodsi4>
    11ac:	21 50       	subi	r18, 0x01	; 1
    11ae:	31 09       	sbc	r19, r1
	
	u8Ucsz2 = (UART_CfgData.u8CharSize & (1<<3)) >> 1;
    11b0:	40 91 46 01 	lds	r20, 0x0146
    11b4:	84 2f       	mov	r24, r20
    11b6:	88 70       	andi	r24, 0x08	; 8
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	95 95       	asr	r25
    11bc:	87 95       	ror	r24
	UCSRB_REG =	0x00;
    11be:	1a b8       	out	0x0a, r1	; 10
	UCSRC_REG |= USART_UCSRC_SEL;
    11c0:	90 b5       	in	r25, 0x20	; 32
    11c2:	90 68       	ori	r25, 0x80	; 128
    11c4:	90 bd       	out	0x20, r25	; 32
	UCSRC_REG |= ((UART_CfgData.u8CharSize)&~(1<<3)) | (UART_CfgData.u8Parity) | (UART_CfgData.u8StopBit);
    11c6:	50 b5       	in	r21, 0x20	; 32
    11c8:	90 91 47 01 	lds	r25, 0x0147
    11cc:	95 2b       	or	r25, r21
    11ce:	50 91 48 01 	lds	r21, 0x0148
    11d2:	95 2b       	or	r25, r21
    11d4:	47 7f       	andi	r20, 0xF7	; 247
    11d6:	49 2b       	or	r20, r25
    11d8:	40 bd       	out	0x20, r20	; 32
	
	UBRRL_REG = (u8) u16Ubrr;
    11da:	29 b9       	out	0x09, r18	; 9
	UBRRH_REG = (u8) (u16Ubrr >> 8);
    11dc:	30 bd       	out	0x20, r19	; 32
	
	UCSRB_REG |= USART_RX_ENABLE | USART_TX_ENABLE | USART_RX_INT_ENABLE | (u8Ucsz2);
    11de:	9a b1       	in	r25, 0x0a	; 10
    11e0:	98 69       	ori	r25, 0x98	; 152
    11e2:	89 2b       	or	r24, r25
    11e4:	8a b9       	out	0x0a, r24	; 10
	sei();
    11e6:	78 94       	sei
	
}
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret

000011ee <UART_receiveDataIntoBuffer>:
	UDR_REG = u8Byte;
}

void UART_receiveDataIntoBuffer (UartRxCbkFnType UartCbkFn , u8 * buff , u8 len)
{
	USART_CbkRxFun = UartCbkFn;
    11ee:	90 93 68 01 	sts	0x0168, r25
    11f2:	80 93 67 01 	sts	0x0167, r24
	bufferPtr = buff;
    11f6:	70 93 66 01 	sts	0x0166, r23
    11fa:	60 93 65 01 	sts	0x0165, r22
	bufferLength = len;
    11fe:	40 93 64 01 	sts	0x0164, r20
	count = 0;
    1202:	10 92 63 01 	sts	0x0163, r1
    1206:	08 95       	ret

00001208 <__vector_13>:
}

ISR (USART_RXC_vect)
{
    1208:	1f 92       	push	r1
    120a:	0f 92       	push	r0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	0f 92       	push	r0
    1210:	11 24       	eor	r1, r1
    1212:	2f 93       	push	r18
    1214:	3f 93       	push	r19
    1216:	4f 93       	push	r20
    1218:	5f 93       	push	r21
    121a:	6f 93       	push	r22
    121c:	7f 93       	push	r23
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	af 93       	push	r26
    1224:	bf 93       	push	r27
    1226:	ef 93       	push	r30
    1228:	ff 93       	push	r31
	bufferPtr[count++] = UDR_REG;
    122a:	e0 91 65 01 	lds	r30, 0x0165
    122e:	f0 91 66 01 	lds	r31, 0x0166
    1232:	90 91 63 01 	lds	r25, 0x0163
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 0f       	add	r24, r25
    123a:	80 93 63 01 	sts	0x0163, r24
    123e:	2c b1       	in	r18, 0x0c	; 12
    1240:	e9 0f       	add	r30, r25
    1242:	f1 1d       	adc	r31, r1
    1244:	20 83       	st	Z, r18
	if (count == bufferLength)
    1246:	90 91 64 01 	lds	r25, 0x0164
    124a:	89 13       	cpse	r24, r25
    124c:	07 c0       	rjmp	.+14     	; 0x125c <__vector_13+0x54>
	{
		USART_CbkRxFun();
    124e:	e0 91 67 01 	lds	r30, 0x0167
    1252:	f0 91 68 01 	lds	r31, 0x0168
    1256:	09 95       	icall
		count = 0;
    1258:	10 92 63 01 	sts	0x0163, r1
	}
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	bf 91       	pop	r27
    1262:	af 91       	pop	r26
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	7f 91       	pop	r23
    126a:	6f 91       	pop	r22
    126c:	5f 91       	pop	r21
    126e:	4f 91       	pop	r20
    1270:	3f 91       	pop	r19
    1272:	2f 91       	pop	r18
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	0f 90       	pop	r0
    127a:	1f 90       	pop	r1
    127c:	18 95       	reti

0000127e <__subsf3>:
    127e:	50 58       	subi	r21, 0x80	; 128

00001280 <__addsf3>:
    1280:	bb 27       	eor	r27, r27
    1282:	aa 27       	eor	r26, r26
    1284:	0e d0       	rcall	.+28     	; 0x12a2 <__addsf3x>
    1286:	48 c1       	rjmp	.+656    	; 0x1518 <__fp_round>
    1288:	39 d1       	rcall	.+626    	; 0x14fc <__fp_pscA>
    128a:	30 f0       	brcs	.+12     	; 0x1298 <__addsf3+0x18>
    128c:	3e d1       	rcall	.+636    	; 0x150a <__fp_pscB>
    128e:	20 f0       	brcs	.+8      	; 0x1298 <__addsf3+0x18>
    1290:	31 f4       	brne	.+12     	; 0x129e <__addsf3+0x1e>
    1292:	9f 3f       	cpi	r25, 0xFF	; 255
    1294:	11 f4       	brne	.+4      	; 0x129a <__addsf3+0x1a>
    1296:	1e f4       	brtc	.+6      	; 0x129e <__addsf3+0x1e>
    1298:	2e c1       	rjmp	.+604    	; 0x14f6 <__fp_nan>
    129a:	0e f4       	brtc	.+2      	; 0x129e <__addsf3+0x1e>
    129c:	e0 95       	com	r30
    129e:	e7 fb       	bst	r30, 7
    12a0:	24 c1       	rjmp	.+584    	; 0x14ea <__fp_inf>

000012a2 <__addsf3x>:
    12a2:	e9 2f       	mov	r30, r25
    12a4:	4a d1       	rcall	.+660    	; 0x153a <__fp_split3>
    12a6:	80 f3       	brcs	.-32     	; 0x1288 <__addsf3+0x8>
    12a8:	ba 17       	cp	r27, r26
    12aa:	62 07       	cpc	r22, r18
    12ac:	73 07       	cpc	r23, r19
    12ae:	84 07       	cpc	r24, r20
    12b0:	95 07       	cpc	r25, r21
    12b2:	18 f0       	brcs	.+6      	; 0x12ba <__addsf3x+0x18>
    12b4:	71 f4       	brne	.+28     	; 0x12d2 <__addsf3x+0x30>
    12b6:	9e f5       	brtc	.+102    	; 0x131e <__addsf3x+0x7c>
    12b8:	62 c1       	rjmp	.+708    	; 0x157e <__fp_zero>
    12ba:	0e f4       	brtc	.+2      	; 0x12be <__addsf3x+0x1c>
    12bc:	e0 95       	com	r30
    12be:	0b 2e       	mov	r0, r27
    12c0:	ba 2f       	mov	r27, r26
    12c2:	a0 2d       	mov	r26, r0
    12c4:	0b 01       	movw	r0, r22
    12c6:	b9 01       	movw	r22, r18
    12c8:	90 01       	movw	r18, r0
    12ca:	0c 01       	movw	r0, r24
    12cc:	ca 01       	movw	r24, r20
    12ce:	a0 01       	movw	r20, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	ff 27       	eor	r31, r31
    12d4:	59 1b       	sub	r21, r25
    12d6:	99 f0       	breq	.+38     	; 0x12fe <__addsf3x+0x5c>
    12d8:	59 3f       	cpi	r21, 0xF9	; 249
    12da:	50 f4       	brcc	.+20     	; 0x12f0 <__addsf3x+0x4e>
    12dc:	50 3e       	cpi	r21, 0xE0	; 224
    12de:	68 f1       	brcs	.+90     	; 0x133a <__addsf3x+0x98>
    12e0:	1a 16       	cp	r1, r26
    12e2:	f0 40       	sbci	r31, 0x00	; 0
    12e4:	a2 2f       	mov	r26, r18
    12e6:	23 2f       	mov	r18, r19
    12e8:	34 2f       	mov	r19, r20
    12ea:	44 27       	eor	r20, r20
    12ec:	58 5f       	subi	r21, 0xF8	; 248
    12ee:	f3 cf       	rjmp	.-26     	; 0x12d6 <__addsf3x+0x34>
    12f0:	46 95       	lsr	r20
    12f2:	37 95       	ror	r19
    12f4:	27 95       	ror	r18
    12f6:	a7 95       	ror	r26
    12f8:	f0 40       	sbci	r31, 0x00	; 0
    12fa:	53 95       	inc	r21
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__addsf3x+0x4e>
    12fe:	7e f4       	brtc	.+30     	; 0x131e <__addsf3x+0x7c>
    1300:	1f 16       	cp	r1, r31
    1302:	ba 0b       	sbc	r27, r26
    1304:	62 0b       	sbc	r22, r18
    1306:	73 0b       	sbc	r23, r19
    1308:	84 0b       	sbc	r24, r20
    130a:	ba f0       	brmi	.+46     	; 0x133a <__addsf3x+0x98>
    130c:	91 50       	subi	r25, 0x01	; 1
    130e:	a1 f0       	breq	.+40     	; 0x1338 <__addsf3x+0x96>
    1310:	ff 0f       	add	r31, r31
    1312:	bb 1f       	adc	r27, r27
    1314:	66 1f       	adc	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	c2 f7       	brpl	.-16     	; 0x130c <__addsf3x+0x6a>
    131c:	0e c0       	rjmp	.+28     	; 0x133a <__addsf3x+0x98>
    131e:	ba 0f       	add	r27, r26
    1320:	62 1f       	adc	r22, r18
    1322:	73 1f       	adc	r23, r19
    1324:	84 1f       	adc	r24, r20
    1326:	48 f4       	brcc	.+18     	; 0x133a <__addsf3x+0x98>
    1328:	87 95       	ror	r24
    132a:	77 95       	ror	r23
    132c:	67 95       	ror	r22
    132e:	b7 95       	ror	r27
    1330:	f7 95       	ror	r31
    1332:	9e 3f       	cpi	r25, 0xFE	; 254
    1334:	08 f0       	brcs	.+2      	; 0x1338 <__addsf3x+0x96>
    1336:	b3 cf       	rjmp	.-154    	; 0x129e <__addsf3+0x1e>
    1338:	93 95       	inc	r25
    133a:	88 0f       	add	r24, r24
    133c:	08 f0       	brcs	.+2      	; 0x1340 <__addsf3x+0x9e>
    133e:	99 27       	eor	r25, r25
    1340:	ee 0f       	add	r30, r30
    1342:	97 95       	ror	r25
    1344:	87 95       	ror	r24
    1346:	08 95       	ret

00001348 <__divsf3>:
    1348:	0c d0       	rcall	.+24     	; 0x1362 <__divsf3x>
    134a:	e6 c0       	rjmp	.+460    	; 0x1518 <__fp_round>
    134c:	de d0       	rcall	.+444    	; 0x150a <__fp_pscB>
    134e:	40 f0       	brcs	.+16     	; 0x1360 <__divsf3+0x18>
    1350:	d5 d0       	rcall	.+426    	; 0x14fc <__fp_pscA>
    1352:	30 f0       	brcs	.+12     	; 0x1360 <__divsf3+0x18>
    1354:	21 f4       	brne	.+8      	; 0x135e <__divsf3+0x16>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	19 f0       	breq	.+6      	; 0x1360 <__divsf3+0x18>
    135a:	c7 c0       	rjmp	.+398    	; 0x14ea <__fp_inf>
    135c:	51 11       	cpse	r21, r1
    135e:	10 c1       	rjmp	.+544    	; 0x1580 <__fp_szero>
    1360:	ca c0       	rjmp	.+404    	; 0x14f6 <__fp_nan>

00001362 <__divsf3x>:
    1362:	eb d0       	rcall	.+470    	; 0x153a <__fp_split3>
    1364:	98 f3       	brcs	.-26     	; 0x134c <__divsf3+0x4>

00001366 <__divsf3_pse>:
    1366:	99 23       	and	r25, r25
    1368:	c9 f3       	breq	.-14     	; 0x135c <__divsf3+0x14>
    136a:	55 23       	and	r21, r21
    136c:	b1 f3       	breq	.-20     	; 0x135a <__divsf3+0x12>
    136e:	95 1b       	sub	r25, r21
    1370:	55 0b       	sbc	r21, r21
    1372:	bb 27       	eor	r27, r27
    1374:	aa 27       	eor	r26, r26
    1376:	62 17       	cp	r22, r18
    1378:	73 07       	cpc	r23, r19
    137a:	84 07       	cpc	r24, r20
    137c:	38 f0       	brcs	.+14     	; 0x138c <__divsf3_pse+0x26>
    137e:	9f 5f       	subi	r25, 0xFF	; 255
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	22 0f       	add	r18, r18
    1384:	33 1f       	adc	r19, r19
    1386:	44 1f       	adc	r20, r20
    1388:	aa 1f       	adc	r26, r26
    138a:	a9 f3       	breq	.-22     	; 0x1376 <__divsf3_pse+0x10>
    138c:	33 d0       	rcall	.+102    	; 0x13f4 <__divsf3_pse+0x8e>
    138e:	0e 2e       	mov	r0, r30
    1390:	3a f0       	brmi	.+14     	; 0x13a0 <__divsf3_pse+0x3a>
    1392:	e0 e8       	ldi	r30, 0x80	; 128
    1394:	30 d0       	rcall	.+96     	; 0x13f6 <__divsf3_pse+0x90>
    1396:	91 50       	subi	r25, 0x01	; 1
    1398:	50 40       	sbci	r21, 0x00	; 0
    139a:	e6 95       	lsr	r30
    139c:	00 1c       	adc	r0, r0
    139e:	ca f7       	brpl	.-14     	; 0x1392 <__divsf3_pse+0x2c>
    13a0:	29 d0       	rcall	.+82     	; 0x13f4 <__divsf3_pse+0x8e>
    13a2:	fe 2f       	mov	r31, r30
    13a4:	27 d0       	rcall	.+78     	; 0x13f4 <__divsf3_pse+0x8e>
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	88 1f       	adc	r24, r24
    13ac:	bb 1f       	adc	r27, r27
    13ae:	26 17       	cp	r18, r22
    13b0:	37 07       	cpc	r19, r23
    13b2:	48 07       	cpc	r20, r24
    13b4:	ab 07       	cpc	r26, r27
    13b6:	b0 e8       	ldi	r27, 0x80	; 128
    13b8:	09 f0       	breq	.+2      	; 0x13bc <__divsf3_pse+0x56>
    13ba:	bb 0b       	sbc	r27, r27
    13bc:	80 2d       	mov	r24, r0
    13be:	bf 01       	movw	r22, r30
    13c0:	ff 27       	eor	r31, r31
    13c2:	93 58       	subi	r25, 0x83	; 131
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	2a f0       	brmi	.+10     	; 0x13d2 <__divsf3_pse+0x6c>
    13c8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ca:	51 05       	cpc	r21, r1
    13cc:	68 f0       	brcs	.+26     	; 0x13e8 <__divsf3_pse+0x82>
    13ce:	8d c0       	rjmp	.+282    	; 0x14ea <__fp_inf>
    13d0:	d7 c0       	rjmp	.+430    	; 0x1580 <__fp_szero>
    13d2:	5f 3f       	cpi	r21, 0xFF	; 255
    13d4:	ec f3       	brlt	.-6      	; 0x13d0 <__divsf3_pse+0x6a>
    13d6:	98 3e       	cpi	r25, 0xE8	; 232
    13d8:	dc f3       	brlt	.-10     	; 0x13d0 <__divsf3_pse+0x6a>
    13da:	86 95       	lsr	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b7 95       	ror	r27
    13e2:	f7 95       	ror	r31
    13e4:	9f 5f       	subi	r25, 0xFF	; 255
    13e6:	c9 f7       	brne	.-14     	; 0x13da <__divsf3_pse+0x74>
    13e8:	88 0f       	add	r24, r24
    13ea:	91 1d       	adc	r25, r1
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	97 f9       	bld	r25, 7
    13f2:	08 95       	ret
    13f4:	e1 e0       	ldi	r30, 0x01	; 1
    13f6:	66 0f       	add	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	bb 1f       	adc	r27, r27
    13fe:	62 17       	cp	r22, r18
    1400:	73 07       	cpc	r23, r19
    1402:	84 07       	cpc	r24, r20
    1404:	ba 07       	cpc	r27, r26
    1406:	20 f0       	brcs	.+8      	; 0x1410 <__divsf3_pse+0xaa>
    1408:	62 1b       	sub	r22, r18
    140a:	73 0b       	sbc	r23, r19
    140c:	84 0b       	sbc	r24, r20
    140e:	ba 0b       	sbc	r27, r26
    1410:	ee 1f       	adc	r30, r30
    1412:	88 f7       	brcc	.-30     	; 0x13f6 <__divsf3_pse+0x90>
    1414:	e0 95       	com	r30
    1416:	08 95       	ret

00001418 <__fixunssfsi>:
    1418:	98 d0       	rcall	.+304    	; 0x154a <__fp_splitA>
    141a:	88 f0       	brcs	.+34     	; 0x143e <__fixunssfsi+0x26>
    141c:	9f 57       	subi	r25, 0x7F	; 127
    141e:	90 f0       	brcs	.+36     	; 0x1444 <__fixunssfsi+0x2c>
    1420:	b9 2f       	mov	r27, r25
    1422:	99 27       	eor	r25, r25
    1424:	b7 51       	subi	r27, 0x17	; 23
    1426:	a0 f0       	brcs	.+40     	; 0x1450 <__fixunssfsi+0x38>
    1428:	d1 f0       	breq	.+52     	; 0x145e <__fixunssfsi+0x46>
    142a:	66 0f       	add	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	1a f0       	brmi	.+6      	; 0x143a <__fixunssfsi+0x22>
    1434:	ba 95       	dec	r27
    1436:	c9 f7       	brne	.-14     	; 0x142a <__fixunssfsi+0x12>
    1438:	12 c0       	rjmp	.+36     	; 0x145e <__fixunssfsi+0x46>
    143a:	b1 30       	cpi	r27, 0x01	; 1
    143c:	81 f0       	breq	.+32     	; 0x145e <__fixunssfsi+0x46>
    143e:	9f d0       	rcall	.+318    	; 0x157e <__fp_zero>
    1440:	b1 e0       	ldi	r27, 0x01	; 1
    1442:	08 95       	ret
    1444:	9c c0       	rjmp	.+312    	; 0x157e <__fp_zero>
    1446:	67 2f       	mov	r22, r23
    1448:	78 2f       	mov	r23, r24
    144a:	88 27       	eor	r24, r24
    144c:	b8 5f       	subi	r27, 0xF8	; 248
    144e:	39 f0       	breq	.+14     	; 0x145e <__fixunssfsi+0x46>
    1450:	b9 3f       	cpi	r27, 0xF9	; 249
    1452:	cc f3       	brlt	.-14     	; 0x1446 <__fixunssfsi+0x2e>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b3 95       	inc	r27
    145c:	d9 f7       	brne	.-10     	; 0x1454 <__fixunssfsi+0x3c>
    145e:	3e f4       	brtc	.+14     	; 0x146e <__fixunssfsi+0x56>
    1460:	90 95       	com	r25
    1462:	80 95       	com	r24
    1464:	70 95       	com	r23
    1466:	61 95       	neg	r22
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	8f 4f       	sbci	r24, 0xFF	; 255
    146c:	9f 4f       	sbci	r25, 0xFF	; 255
    146e:	08 95       	ret

00001470 <__floatunsisf>:
    1470:	e8 94       	clt
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <__floatsisf+0x12>

00001474 <__floatsisf>:
    1474:	97 fb       	bst	r25, 7
    1476:	3e f4       	brtc	.+14     	; 0x1486 <__floatsisf+0x12>
    1478:	90 95       	com	r25
    147a:	80 95       	com	r24
    147c:	70 95       	com	r23
    147e:	61 95       	neg	r22
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	8f 4f       	sbci	r24, 0xFF	; 255
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	99 23       	and	r25, r25
    1488:	a9 f0       	breq	.+42     	; 0x14b4 <__floatsisf+0x40>
    148a:	f9 2f       	mov	r31, r25
    148c:	96 e9       	ldi	r25, 0x96	; 150
    148e:	bb 27       	eor	r27, r27
    1490:	93 95       	inc	r25
    1492:	f6 95       	lsr	r31
    1494:	87 95       	ror	r24
    1496:	77 95       	ror	r23
    1498:	67 95       	ror	r22
    149a:	b7 95       	ror	r27
    149c:	f1 11       	cpse	r31, r1
    149e:	f8 cf       	rjmp	.-16     	; 0x1490 <__floatsisf+0x1c>
    14a0:	fa f4       	brpl	.+62     	; 0x14e0 <__floatsisf+0x6c>
    14a2:	bb 0f       	add	r27, r27
    14a4:	11 f4       	brne	.+4      	; 0x14aa <__floatsisf+0x36>
    14a6:	60 ff       	sbrs	r22, 0
    14a8:	1b c0       	rjmp	.+54     	; 0x14e0 <__floatsisf+0x6c>
    14aa:	6f 5f       	subi	r22, 0xFF	; 255
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	8f 4f       	sbci	r24, 0xFF	; 255
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	16 c0       	rjmp	.+44     	; 0x14e0 <__floatsisf+0x6c>
    14b4:	88 23       	and	r24, r24
    14b6:	11 f0       	breq	.+4      	; 0x14bc <__floatsisf+0x48>
    14b8:	96 e9       	ldi	r25, 0x96	; 150
    14ba:	11 c0       	rjmp	.+34     	; 0x14de <__floatsisf+0x6a>
    14bc:	77 23       	and	r23, r23
    14be:	21 f0       	breq	.+8      	; 0x14c8 <__floatsisf+0x54>
    14c0:	9e e8       	ldi	r25, 0x8E	; 142
    14c2:	87 2f       	mov	r24, r23
    14c4:	76 2f       	mov	r23, r22
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <__floatsisf+0x5e>
    14c8:	66 23       	and	r22, r22
    14ca:	71 f0       	breq	.+28     	; 0x14e8 <__floatsisf+0x74>
    14cc:	96 e8       	ldi	r25, 0x86	; 134
    14ce:	86 2f       	mov	r24, r22
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	2a f0       	brmi	.+10     	; 0x14e0 <__floatsisf+0x6c>
    14d6:	9a 95       	dec	r25
    14d8:	66 0f       	add	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	da f7       	brpl	.-10     	; 0x14d6 <__floatsisf+0x62>
    14e0:	88 0f       	add	r24, r24
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	97 f9       	bld	r25, 7
    14e8:	08 95       	ret

000014ea <__fp_inf>:
    14ea:	97 f9       	bld	r25, 7
    14ec:	9f 67       	ori	r25, 0x7F	; 127
    14ee:	80 e8       	ldi	r24, 0x80	; 128
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	08 95       	ret

000014f6 <__fp_nan>:
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	80 ec       	ldi	r24, 0xC0	; 192
    14fa:	08 95       	ret

000014fc <__fp_pscA>:
    14fc:	00 24       	eor	r0, r0
    14fe:	0a 94       	dec	r0
    1500:	16 16       	cp	r1, r22
    1502:	17 06       	cpc	r1, r23
    1504:	18 06       	cpc	r1, r24
    1506:	09 06       	cpc	r0, r25
    1508:	08 95       	ret

0000150a <__fp_pscB>:
    150a:	00 24       	eor	r0, r0
    150c:	0a 94       	dec	r0
    150e:	12 16       	cp	r1, r18
    1510:	13 06       	cpc	r1, r19
    1512:	14 06       	cpc	r1, r20
    1514:	05 06       	cpc	r0, r21
    1516:	08 95       	ret

00001518 <__fp_round>:
    1518:	09 2e       	mov	r0, r25
    151a:	03 94       	inc	r0
    151c:	00 0c       	add	r0, r0
    151e:	11 f4       	brne	.+4      	; 0x1524 <__fp_round+0xc>
    1520:	88 23       	and	r24, r24
    1522:	52 f0       	brmi	.+20     	; 0x1538 <__fp_round+0x20>
    1524:	bb 0f       	add	r27, r27
    1526:	40 f4       	brcc	.+16     	; 0x1538 <__fp_round+0x20>
    1528:	bf 2b       	or	r27, r31
    152a:	11 f4       	brne	.+4      	; 0x1530 <__fp_round+0x18>
    152c:	60 ff       	sbrs	r22, 0
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <__fp_round+0x20>
    1530:	6f 5f       	subi	r22, 0xFF	; 255
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	8f 4f       	sbci	r24, 0xFF	; 255
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	08 95       	ret

0000153a <__fp_split3>:
    153a:	57 fd       	sbrc	r21, 7
    153c:	90 58       	subi	r25, 0x80	; 128
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	59 f0       	breq	.+22     	; 0x155a <__fp_splitA+0x10>
    1544:	5f 3f       	cpi	r21, 0xFF	; 255
    1546:	71 f0       	breq	.+28     	; 0x1564 <__fp_splitA+0x1a>
    1548:	47 95       	ror	r20

0000154a <__fp_splitA>:
    154a:	88 0f       	add	r24, r24
    154c:	97 fb       	bst	r25, 7
    154e:	99 1f       	adc	r25, r25
    1550:	61 f0       	breq	.+24     	; 0x156a <__fp_splitA+0x20>
    1552:	9f 3f       	cpi	r25, 0xFF	; 255
    1554:	79 f0       	breq	.+30     	; 0x1574 <__fp_splitA+0x2a>
    1556:	87 95       	ror	r24
    1558:	08 95       	ret
    155a:	12 16       	cp	r1, r18
    155c:	13 06       	cpc	r1, r19
    155e:	14 06       	cpc	r1, r20
    1560:	55 1f       	adc	r21, r21
    1562:	f2 cf       	rjmp	.-28     	; 0x1548 <__fp_split3+0xe>
    1564:	46 95       	lsr	r20
    1566:	f1 df       	rcall	.-30     	; 0x154a <__fp_splitA>
    1568:	08 c0       	rjmp	.+16     	; 0x157a <__fp_splitA+0x30>
    156a:	16 16       	cp	r1, r22
    156c:	17 06       	cpc	r1, r23
    156e:	18 06       	cpc	r1, r24
    1570:	99 1f       	adc	r25, r25
    1572:	f1 cf       	rjmp	.-30     	; 0x1556 <__fp_splitA+0xc>
    1574:	86 95       	lsr	r24
    1576:	71 05       	cpc	r23, r1
    1578:	61 05       	cpc	r22, r1
    157a:	08 94       	sec
    157c:	08 95       	ret

0000157e <__fp_zero>:
    157e:	e8 94       	clt

00001580 <__fp_szero>:
    1580:	bb 27       	eor	r27, r27
    1582:	66 27       	eor	r22, r22
    1584:	77 27       	eor	r23, r23
    1586:	cb 01       	movw	r24, r22
    1588:	97 f9       	bld	r25, 7
    158a:	08 95       	ret

0000158c <__mulsf3>:
    158c:	0b d0       	rcall	.+22     	; 0x15a4 <__mulsf3x>
    158e:	c4 cf       	rjmp	.-120    	; 0x1518 <__fp_round>
    1590:	b5 df       	rcall	.-150    	; 0x14fc <__fp_pscA>
    1592:	28 f0       	brcs	.+10     	; 0x159e <__mulsf3+0x12>
    1594:	ba df       	rcall	.-140    	; 0x150a <__fp_pscB>
    1596:	18 f0       	brcs	.+6      	; 0x159e <__mulsf3+0x12>
    1598:	95 23       	and	r25, r21
    159a:	09 f0       	breq	.+2      	; 0x159e <__mulsf3+0x12>
    159c:	a6 cf       	rjmp	.-180    	; 0x14ea <__fp_inf>
    159e:	ab cf       	rjmp	.-170    	; 0x14f6 <__fp_nan>
    15a0:	11 24       	eor	r1, r1
    15a2:	ee cf       	rjmp	.-36     	; 0x1580 <__fp_szero>

000015a4 <__mulsf3x>:
    15a4:	ca df       	rcall	.-108    	; 0x153a <__fp_split3>
    15a6:	a0 f3       	brcs	.-24     	; 0x1590 <__mulsf3+0x4>

000015a8 <__mulsf3_pse>:
    15a8:	95 9f       	mul	r25, r21
    15aa:	d1 f3       	breq	.-12     	; 0x15a0 <__mulsf3+0x14>
    15ac:	95 0f       	add	r25, r21
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	55 1f       	adc	r21, r21
    15b2:	62 9f       	mul	r22, r18
    15b4:	f0 01       	movw	r30, r0
    15b6:	72 9f       	mul	r23, r18
    15b8:	bb 27       	eor	r27, r27
    15ba:	f0 0d       	add	r31, r0
    15bc:	b1 1d       	adc	r27, r1
    15be:	63 9f       	mul	r22, r19
    15c0:	aa 27       	eor	r26, r26
    15c2:	f0 0d       	add	r31, r0
    15c4:	b1 1d       	adc	r27, r1
    15c6:	aa 1f       	adc	r26, r26
    15c8:	64 9f       	mul	r22, r20
    15ca:	66 27       	eor	r22, r22
    15cc:	b0 0d       	add	r27, r0
    15ce:	a1 1d       	adc	r26, r1
    15d0:	66 1f       	adc	r22, r22
    15d2:	82 9f       	mul	r24, r18
    15d4:	22 27       	eor	r18, r18
    15d6:	b0 0d       	add	r27, r0
    15d8:	a1 1d       	adc	r26, r1
    15da:	62 1f       	adc	r22, r18
    15dc:	73 9f       	mul	r23, r19
    15de:	b0 0d       	add	r27, r0
    15e0:	a1 1d       	adc	r26, r1
    15e2:	62 1f       	adc	r22, r18
    15e4:	83 9f       	mul	r24, r19
    15e6:	a0 0d       	add	r26, r0
    15e8:	61 1d       	adc	r22, r1
    15ea:	22 1f       	adc	r18, r18
    15ec:	74 9f       	mul	r23, r20
    15ee:	33 27       	eor	r19, r19
    15f0:	a0 0d       	add	r26, r0
    15f2:	61 1d       	adc	r22, r1
    15f4:	23 1f       	adc	r18, r19
    15f6:	84 9f       	mul	r24, r20
    15f8:	60 0d       	add	r22, r0
    15fa:	21 1d       	adc	r18, r1
    15fc:	82 2f       	mov	r24, r18
    15fe:	76 2f       	mov	r23, r22
    1600:	6a 2f       	mov	r22, r26
    1602:	11 24       	eor	r1, r1
    1604:	9f 57       	subi	r25, 0x7F	; 127
    1606:	50 40       	sbci	r21, 0x00	; 0
    1608:	8a f0       	brmi	.+34     	; 0x162c <__mulsf3_pse+0x84>
    160a:	e1 f0       	breq	.+56     	; 0x1644 <__mulsf3_pse+0x9c>
    160c:	88 23       	and	r24, r24
    160e:	4a f0       	brmi	.+18     	; 0x1622 <__mulsf3_pse+0x7a>
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	bb 1f       	adc	r27, r27
    1616:	66 1f       	adc	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	91 50       	subi	r25, 0x01	; 1
    161e:	50 40       	sbci	r21, 0x00	; 0
    1620:	a9 f7       	brne	.-22     	; 0x160c <__mulsf3_pse+0x64>
    1622:	9e 3f       	cpi	r25, 0xFE	; 254
    1624:	51 05       	cpc	r21, r1
    1626:	70 f0       	brcs	.+28     	; 0x1644 <__mulsf3_pse+0x9c>
    1628:	60 cf       	rjmp	.-320    	; 0x14ea <__fp_inf>
    162a:	aa cf       	rjmp	.-172    	; 0x1580 <__fp_szero>
    162c:	5f 3f       	cpi	r21, 0xFF	; 255
    162e:	ec f3       	brlt	.-6      	; 0x162a <__mulsf3_pse+0x82>
    1630:	98 3e       	cpi	r25, 0xE8	; 232
    1632:	dc f3       	brlt	.-10     	; 0x162a <__mulsf3_pse+0x82>
    1634:	86 95       	lsr	r24
    1636:	77 95       	ror	r23
    1638:	67 95       	ror	r22
    163a:	b7 95       	ror	r27
    163c:	f7 95       	ror	r31
    163e:	e7 95       	ror	r30
    1640:	9f 5f       	subi	r25, 0xFF	; 255
    1642:	c1 f7       	brne	.-16     	; 0x1634 <__mulsf3_pse+0x8c>
    1644:	fe 2b       	or	r31, r30
    1646:	88 0f       	add	r24, r24
    1648:	91 1d       	adc	r25, r1
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	97 f9       	bld	r25, 7
    1650:	08 95       	ret

00001652 <__udivmodsi4>:
    1652:	a1 e2       	ldi	r26, 0x21	; 33
    1654:	1a 2e       	mov	r1, r26
    1656:	aa 1b       	sub	r26, r26
    1658:	bb 1b       	sub	r27, r27
    165a:	fd 01       	movw	r30, r26
    165c:	0d c0       	rjmp	.+26     	; 0x1678 <__udivmodsi4_ep>

0000165e <__udivmodsi4_loop>:
    165e:	aa 1f       	adc	r26, r26
    1660:	bb 1f       	adc	r27, r27
    1662:	ee 1f       	adc	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	a2 17       	cp	r26, r18
    1668:	b3 07       	cpc	r27, r19
    166a:	e4 07       	cpc	r30, r20
    166c:	f5 07       	cpc	r31, r21
    166e:	20 f0       	brcs	.+8      	; 0x1678 <__udivmodsi4_ep>
    1670:	a2 1b       	sub	r26, r18
    1672:	b3 0b       	sbc	r27, r19
    1674:	e4 0b       	sbc	r30, r20
    1676:	f5 0b       	sbc	r31, r21

00001678 <__udivmodsi4_ep>:
    1678:	66 1f       	adc	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	1a 94       	dec	r1
    1682:	69 f7       	brne	.-38     	; 0x165e <__udivmodsi4_loop>
    1684:	60 95       	com	r22
    1686:	70 95       	com	r23
    1688:	80 95       	com	r24
    168a:	90 95       	com	r25
    168c:	9b 01       	movw	r18, r22
    168e:	ac 01       	movw	r20, r24
    1690:	bd 01       	movw	r22, r26
    1692:	cf 01       	movw	r24, r30
    1694:	08 95       	ret

00001696 <_exit>:
    1696:	f8 94       	cli

00001698 <__stop_program>:
    1698:	ff cf       	rjmp	.-2      	; 0x1698 <__stop_program>
